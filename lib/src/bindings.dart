// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for `src/includes/ndarray.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class NDArray {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NDArray(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NDArray.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>>
      _NDARRAY_SAME_KIND_CASTS_FLOAT64 =
      _lookup<ffi.Pointer<ffi.Int8>>('NDARRAY_SAME_KIND_CASTS_FLOAT64');

  ffi.Pointer<ffi.Int8> get NDARRAY_SAME_KIND_CASTS_FLOAT64 =>
      _NDARRAY_SAME_KIND_CASTS_FLOAT64.value;

  set NDARRAY_SAME_KIND_CASTS_FLOAT64(ffi.Pointer<ffi.Int8> value) =>
      _NDARRAY_SAME_KIND_CASTS_FLOAT64.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>>
      _NDARRAY_SAME_KIND_CASTS_FLOAT32 =
      _lookup<ffi.Pointer<ffi.Int8>>('NDARRAY_SAME_KIND_CASTS_FLOAT32');

  ffi.Pointer<ffi.Int8> get NDARRAY_SAME_KIND_CASTS_FLOAT32 =>
      _NDARRAY_SAME_KIND_CASTS_FLOAT32.value;

  set NDARRAY_SAME_KIND_CASTS_FLOAT32(ffi.Pointer<ffi.Int8> value) =>
      _NDARRAY_SAME_KIND_CASTS_FLOAT32.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>>
      _NDARRAY_SAME_KIND_CASTS_UINT64 =
      _lookup<ffi.Pointer<ffi.Int8>>('NDARRAY_SAME_KIND_CASTS_UINT64');

  ffi.Pointer<ffi.Int8> get NDARRAY_SAME_KIND_CASTS_UINT64 =>
      _NDARRAY_SAME_KIND_CASTS_UINT64.value;

  set NDARRAY_SAME_KIND_CASTS_UINT64(ffi.Pointer<ffi.Int8> value) =>
      _NDARRAY_SAME_KIND_CASTS_UINT64.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _NDARRAY_SAME_KIND_CASTS_INT64 =
      _lookup<ffi.Pointer<ffi.Int8>>('NDARRAY_SAME_KIND_CASTS_INT64');

  ffi.Pointer<ffi.Int8> get NDARRAY_SAME_KIND_CASTS_INT64 =>
      _NDARRAY_SAME_KIND_CASTS_INT64.value;

  set NDARRAY_SAME_KIND_CASTS_INT64(ffi.Pointer<ffi.Int8> value) =>
      _NDARRAY_SAME_KIND_CASTS_INT64.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>>
      _NDARRAY_SAME_KIND_CASTS_UINT32 =
      _lookup<ffi.Pointer<ffi.Int8>>('NDARRAY_SAME_KIND_CASTS_UINT32');

  ffi.Pointer<ffi.Int8> get NDARRAY_SAME_KIND_CASTS_UINT32 =>
      _NDARRAY_SAME_KIND_CASTS_UINT32.value;

  set NDARRAY_SAME_KIND_CASTS_UINT32(ffi.Pointer<ffi.Int8> value) =>
      _NDARRAY_SAME_KIND_CASTS_UINT32.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _NDARRAY_SAME_KIND_CASTS_INT32 =
      _lookup<ffi.Pointer<ffi.Int8>>('NDARRAY_SAME_KIND_CASTS_INT32');

  ffi.Pointer<ffi.Int8> get NDARRAY_SAME_KIND_CASTS_INT32 =>
      _NDARRAY_SAME_KIND_CASTS_INT32.value;

  set NDARRAY_SAME_KIND_CASTS_INT32(ffi.Pointer<ffi.Int8> value) =>
      _NDARRAY_SAME_KIND_CASTS_INT32.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>>
      _NDARRAY_SAME_KIND_CASTS_UINT16 =
      _lookup<ffi.Pointer<ffi.Int8>>('NDARRAY_SAME_KIND_CASTS_UINT16');

  ffi.Pointer<ffi.Int8> get NDARRAY_SAME_KIND_CASTS_UINT16 =>
      _NDARRAY_SAME_KIND_CASTS_UINT16.value;

  set NDARRAY_SAME_KIND_CASTS_UINT16(ffi.Pointer<ffi.Int8> value) =>
      _NDARRAY_SAME_KIND_CASTS_UINT16.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _NDARRAY_SAME_KIND_CASTS_INT16 =
      _lookup<ffi.Pointer<ffi.Int8>>('NDARRAY_SAME_KIND_CASTS_INT16');

  ffi.Pointer<ffi.Int8> get NDARRAY_SAME_KIND_CASTS_INT16 =>
      _NDARRAY_SAME_KIND_CASTS_INT16.value;

  set NDARRAY_SAME_KIND_CASTS_INT16(ffi.Pointer<ffi.Int8> value) =>
      _NDARRAY_SAME_KIND_CASTS_INT16.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _NDARRAY_SAME_KIND_CASTS_UINT8 =
      _lookup<ffi.Pointer<ffi.Int8>>('NDARRAY_SAME_KIND_CASTS_UINT8');

  ffi.Pointer<ffi.Int8> get NDARRAY_SAME_KIND_CASTS_UINT8 =>
      _NDARRAY_SAME_KIND_CASTS_UINT8.value;

  set NDARRAY_SAME_KIND_CASTS_UINT8(ffi.Pointer<ffi.Int8> value) =>
      _NDARRAY_SAME_KIND_CASTS_UINT8.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>>
      _NDARRAY_SAME_KIND_CASTS_UINT8C =
      _lookup<ffi.Pointer<ffi.Int8>>('NDARRAY_SAME_KIND_CASTS_UINT8C');

  ffi.Pointer<ffi.Int8> get NDARRAY_SAME_KIND_CASTS_UINT8C =>
      _NDARRAY_SAME_KIND_CASTS_UINT8C.value;

  set NDARRAY_SAME_KIND_CASTS_UINT8C(ffi.Pointer<ffi.Int8> value) =>
      _NDARRAY_SAME_KIND_CASTS_UINT8C.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _NDARRAY_SAME_KIND_CASTS_INT8 =
      _lookup<ffi.Pointer<ffi.Int8>>('NDARRAY_SAME_KIND_CASTS_INT8');

  ffi.Pointer<ffi.Int8> get NDARRAY_SAME_KIND_CASTS_INT8 =>
      _NDARRAY_SAME_KIND_CASTS_INT8.value;

  set NDARRAY_SAME_KIND_CASTS_INT8(ffi.Pointer<ffi.Int8> value) =>
      _NDARRAY_SAME_KIND_CASTS_INT8.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _NDARRAY_SAME_KIND_CASTS_BOOL =
      _lookup<ffi.Pointer<ffi.Int8>>('NDARRAY_SAME_KIND_CASTS_BOOL');

  ffi.Pointer<ffi.Int8> get NDARRAY_SAME_KIND_CASTS_BOOL =>
      _NDARRAY_SAME_KIND_CASTS_BOOL.value;

  set NDARRAY_SAME_KIND_CASTS_BOOL(ffi.Pointer<ffi.Int8> value) =>
      _NDARRAY_SAME_KIND_CASTS_BOOL.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>>
      _NDARRAY_SAME_KIND_CASTS_COMPLEX128 =
      _lookup<ffi.Pointer<ffi.Int8>>('NDARRAY_SAME_KIND_CASTS_COMPLEX128');

  ffi.Pointer<ffi.Int8> get NDARRAY_SAME_KIND_CASTS_COMPLEX128 =>
      _NDARRAY_SAME_KIND_CASTS_COMPLEX128.value;

  set NDARRAY_SAME_KIND_CASTS_COMPLEX128(ffi.Pointer<ffi.Int8> value) =>
      _NDARRAY_SAME_KIND_CASTS_COMPLEX128.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>>
      _NDARRAY_SAME_KIND_CASTS_COMPLEX64 =
      _lookup<ffi.Pointer<ffi.Int8>>('NDARRAY_SAME_KIND_CASTS_COMPLEX64');

  ffi.Pointer<ffi.Int8> get NDARRAY_SAME_KIND_CASTS_COMPLEX64 =>
      _NDARRAY_SAME_KIND_CASTS_COMPLEX64.value;

  set NDARRAY_SAME_KIND_CASTS_COMPLEX64(ffi.Pointer<ffi.Int8> value) =>
      _NDARRAY_SAME_KIND_CASTS_COMPLEX64.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>>
      _NDARRAY_SAME_KIND_CASTS_BINARY =
      _lookup<ffi.Pointer<ffi.Int8>>('NDARRAY_SAME_KIND_CASTS_BINARY');

  ffi.Pointer<ffi.Int8> get NDARRAY_SAME_KIND_CASTS_BINARY =>
      _NDARRAY_SAME_KIND_CASTS_BINARY.value;

  set NDARRAY_SAME_KIND_CASTS_BINARY(ffi.Pointer<ffi.Int8> value) =>
      _NDARRAY_SAME_KIND_CASTS_BINARY.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>>
      _NDARRAY_SAME_KIND_CASTS_GENERIC =
      _lookup<ffi.Pointer<ffi.Int8>>('NDARRAY_SAME_KIND_CASTS_GENERIC');

  ffi.Pointer<ffi.Int8> get NDARRAY_SAME_KIND_CASTS_GENERIC =>
      _NDARRAY_SAME_KIND_CASTS_GENERIC.value;

  set NDARRAY_SAME_KIND_CASTS_GENERIC(ffi.Pointer<ffi.Int8> value) =>
      _NDARRAY_SAME_KIND_CASTS_GENERIC.value = value;

  /// Define a table of pointers containing the above casting tables:
  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>>
      _NDARRAY_SAME_KIND_CASTS =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Int8>>>('NDARRAY_SAME_KIND_CASTS');

  ffi.Pointer<ffi.Pointer<ffi.Int8>> get NDARRAY_SAME_KIND_CASTS =>
      _NDARRAY_SAME_KIND_CASTS.value;

  set NDARRAY_SAME_KIND_CASTS(ffi.Pointer<ffi.Pointer<ffi.Int8>> value) =>
      _NDARRAY_SAME_KIND_CASTS.value = value;

  /// Returns a single-precision complex floating-point number.
  ndarray_complex64_t ndarray_complex64(
    double real,
    double imag,
  ) {
    return _ndarray_complex64(
      real,
      imag,
    );
  }

  late final _ndarray_complex64Ptr = _lookup<
      ffi.NativeFunction<
          ndarray_complex64_t Function(
              ffi.Float, ffi.Float)>>('ndarray_complex64');
  late final _ndarray_complex64 = _ndarray_complex64Ptr
      .asFunction<ndarray_complex64_t Function(double, double)>();

  /// Converts a single-precision floating-point number to a single-precision
  /// complex floating-point number.
  ndarray_complex64_t ndarray_complex64_from_float32(
    double real,
  ) {
    return _ndarray_complex64_from_float32(
      real,
    );
  }

  late final _ndarray_complex64_from_float32Ptr =
      _lookup<ffi.NativeFunction<ndarray_complex64_t Function(ffi.Float)>>(
          'ndarray_complex64_from_float32');
  late final _ndarray_complex64_from_float32 =
      _ndarray_complex64_from_float32Ptr
          .asFunction<ndarray_complex64_t Function(double)>();

  /// Converts a double-precision floating-point number to a single-precision
  /// complex floating-point number.
  ndarray_complex64_t ndarray_complex64_from_float64(
    double real,
  ) {
    return _ndarray_complex64_from_float64(
      real,
    );
  }

  late final _ndarray_complex64_from_float64Ptr =
      _lookup<ffi.NativeFunction<ndarray_complex64_t Function(ffi.Double)>>(
          'ndarray_complex64_from_float64');
  late final _ndarray_complex64_from_float64 =
      _ndarray_complex64_from_float64Ptr
          .asFunction<ndarray_complex64_t Function(double)>();

  /// Converts (copies) a single-precision complex floating-point number to a
  /// single-precision complex floating-point number.
  ndarray_complex64_t ndarray_complex64_from_complex64(
    ndarray_complex64_t z,
  ) {
    return _ndarray_complex64_from_complex64(
      z,
    );
  }

  late final _ndarray_complex64_from_complex64Ptr = _lookup<
      ffi.NativeFunction<
          ndarray_complex64_t Function(
              ndarray_complex64_t)>>('ndarray_complex64_from_complex64');
  late final _ndarray_complex64_from_complex64 =
      _ndarray_complex64_from_complex64Ptr
          .asFunction<ndarray_complex64_t Function(ndarray_complex64_t)>();

  /// Converts a signed 8-bit integer to a single-precision complex floating-point
  /// number.
  ndarray_complex64_t ndarray_complex64_from_int8(
    int real,
  ) {
    return _ndarray_complex64_from_int8(
      real,
    );
  }

  late final _ndarray_complex64_from_int8Ptr =
      _lookup<ffi.NativeFunction<ndarray_complex64_t Function(ffi.Int8)>>(
          'ndarray_complex64_from_int8');
  late final _ndarray_complex64_from_int8 = _ndarray_complex64_from_int8Ptr
      .asFunction<ndarray_complex64_t Function(int)>();

  /// Converts an unsigned 8-bit integer to a single-precision complex
  /// floating-point number.
  ndarray_complex64_t ndarray_complex64_from_uint8(
    int real,
  ) {
    return _ndarray_complex64_from_uint8(
      real,
    );
  }

  late final _ndarray_complex64_from_uint8Ptr =
      _lookup<ffi.NativeFunction<ndarray_complex64_t Function(ffi.Uint8)>>(
          'ndarray_complex64_from_uint8');
  late final _ndarray_complex64_from_uint8 = _ndarray_complex64_from_uint8Ptr
      .asFunction<ndarray_complex64_t Function(int)>();

  /// Converts a signed 16-bit integer to a single-precision complex floating-point
  /// number.
  ndarray_complex64_t ndarray_complex64_from_int16(
    int real,
  ) {
    return _ndarray_complex64_from_int16(
      real,
    );
  }

  late final _ndarray_complex64_from_int16Ptr =
      _lookup<ffi.NativeFunction<ndarray_complex64_t Function(ffi.Int16)>>(
          'ndarray_complex64_from_int16');
  late final _ndarray_complex64_from_int16 = _ndarray_complex64_from_int16Ptr
      .asFunction<ndarray_complex64_t Function(int)>();

  /// Converts an unsigned 16-bit integer to a single-precision complex
  /// floating-point number.
  ndarray_complex64_t ndarray_complex64_from_uint16(
    int real,
  ) {
    return _ndarray_complex64_from_uint16(
      real,
    );
  }

  late final _ndarray_complex64_from_uint16Ptr =
      _lookup<ffi.NativeFunction<ndarray_complex64_t Function(ffi.Uint16)>>(
          'ndarray_complex64_from_uint16');
  late final _ndarray_complex64_from_uint16 = _ndarray_complex64_from_uint16Ptr
      .asFunction<ndarray_complex64_t Function(int)>();

  /// Returns a double-precision complex floating-point number.
  ndarray_complex128_t ndarray_complex128(
    double real,
    double imag,
  ) {
    return _ndarray_complex128(
      real,
      imag,
    );
  }

  late final _ndarray_complex128Ptr = _lookup<
      ffi.NativeFunction<
          ndarray_complex128_t Function(
              ffi.Double, ffi.Double)>>('ndarray_complex128');
  late final _ndarray_complex128 = _ndarray_complex128Ptr
      .asFunction<ndarray_complex128_t Function(double, double)>();

  /// Converts a single-precision floating-point number to a double-precision
  /// complex floating-point number.
  ndarray_complex128_t ndarray_complex128_from_float32(
    double real,
  ) {
    return _ndarray_complex128_from_float32(
      real,
    );
  }

  late final _ndarray_complex128_from_float32Ptr =
      _lookup<ffi.NativeFunction<ndarray_complex128_t Function(ffi.Float)>>(
          'ndarray_complex128_from_float32');
  late final _ndarray_complex128_from_float32 =
      _ndarray_complex128_from_float32Ptr
          .asFunction<ndarray_complex128_t Function(double)>();

  /// Converts a double-precision floating-point number to a double-precision
  /// complex floating-point number.
  ndarray_complex128_t ndarray_complex128_from_float64(
    double real,
  ) {
    return _ndarray_complex128_from_float64(
      real,
    );
  }

  late final _ndarray_complex128_from_float64Ptr =
      _lookup<ffi.NativeFunction<ndarray_complex128_t Function(ffi.Double)>>(
          'ndarray_complex128_from_float64');
  late final _ndarray_complex128_from_float64 =
      _ndarray_complex128_from_float64Ptr
          .asFunction<ndarray_complex128_t Function(double)>();

  /// Converts a single-precision complex floating-point number to a
  /// double-precision complex floating-point number.
  ndarray_complex128_t ndarray_complex128_from_complex64(
    ndarray_complex64_t z,
  ) {
    return _ndarray_complex128_from_complex64(
      z,
    );
  }

  late final _ndarray_complex128_from_complex64Ptr = _lookup<
      ffi.NativeFunction<
          ndarray_complex128_t Function(
              ndarray_complex64_t)>>('ndarray_complex128_from_complex64');
  late final _ndarray_complex128_from_complex64 =
      _ndarray_complex128_from_complex64Ptr
          .asFunction<ndarray_complex128_t Function(ndarray_complex64_t)>();

  /// Converts (copies) a double-precision complex floating-point number to a
  /// double-precision complex floating-point number.
  ndarray_complex128_t ndarray_complex128_from_complex128(
    ndarray_complex128_t z,
  ) {
    return _ndarray_complex128_from_complex128(
      z,
    );
  }

  late final _ndarray_complex128_from_complex128Ptr = _lookup<
      ffi.NativeFunction<
          ndarray_complex128_t Function(
              ndarray_complex128_t)>>('ndarray_complex128_from_complex128');
  late final _ndarray_complex128_from_complex128 =
      _ndarray_complex128_from_complex128Ptr
          .asFunction<ndarray_complex128_t Function(ndarray_complex128_t)>();

  /// Converts a signed 8-bit integer to a double-precision complex floating-point
  /// number.
  ndarray_complex128_t ndarray_complex128_from_int8(
    int real,
  ) {
    return _ndarray_complex128_from_int8(
      real,
    );
  }

  late final _ndarray_complex128_from_int8Ptr =
      _lookup<ffi.NativeFunction<ndarray_complex128_t Function(ffi.Int8)>>(
          'ndarray_complex128_from_int8');
  late final _ndarray_complex128_from_int8 = _ndarray_complex128_from_int8Ptr
      .asFunction<ndarray_complex128_t Function(int)>();

  /// Converts an unsigned 8-bit integer to a double-precision complex
  /// floating-point number.
  ndarray_complex128_t ndarray_complex128_from_uint8(
    int real,
  ) {
    return _ndarray_complex128_from_uint8(
      real,
    );
  }

  late final _ndarray_complex128_from_uint8Ptr =
      _lookup<ffi.NativeFunction<ndarray_complex128_t Function(ffi.Uint8)>>(
          'ndarray_complex128_from_uint8');
  late final _ndarray_complex128_from_uint8 = _ndarray_complex128_from_uint8Ptr
      .asFunction<ndarray_complex128_t Function(int)>();

  /// Converts a signed 16-bit integer to a double-precision complex floating-point
  /// number.
  ndarray_complex128_t ndarray_complex128_from_int16(
    int real,
  ) {
    return _ndarray_complex128_from_int16(
      real,
    );
  }

  late final _ndarray_complex128_from_int16Ptr =
      _lookup<ffi.NativeFunction<ndarray_complex128_t Function(ffi.Int16)>>(
          'ndarray_complex128_from_int16');
  late final _ndarray_complex128_from_int16 = _ndarray_complex128_from_int16Ptr
      .asFunction<ndarray_complex128_t Function(int)>();

  /// Converts an unsigned 16-bit integer to a double-precision complex
  /// floating-point number.
  ndarray_complex128_t ndarray_complex128_from_uint16(
    int real,
  ) {
    return _ndarray_complex128_from_uint16(
      real,
    );
  }

  late final _ndarray_complex128_from_uint16Ptr =
      _lookup<ffi.NativeFunction<ndarray_complex128_t Function(ffi.Uint16)>>(
          'ndarray_complex128_from_uint16');
  late final _ndarray_complex128_from_uint16 =
      _ndarray_complex128_from_uint16Ptr
          .asFunction<ndarray_complex128_t Function(int)>();

  /// Converts a signed 32-bit integer to a double-precision complex floating-point
  /// number.
  ndarray_complex128_t ndarray_complex128_from_int32(
    int real,
  ) {
    return _ndarray_complex128_from_int32(
      real,
    );
  }

  late final _ndarray_complex128_from_int32Ptr =
      _lookup<ffi.NativeFunction<ndarray_complex128_t Function(ffi.Int32)>>(
          'ndarray_complex128_from_int32');
  late final _ndarray_complex128_from_int32 = _ndarray_complex128_from_int32Ptr
      .asFunction<ndarray_complex128_t Function(int)>();

  /// Converts an unsigned 32-bit integer to a double-precision complex
  /// floating-point number.
  ndarray_complex128_t ndarray_complex128_from_uint32(
    int real,
  ) {
    return _ndarray_complex128_from_uint32(
      real,
    );
  }

  late final _ndarray_complex128_from_uint32Ptr =
      _lookup<ffi.NativeFunction<ndarray_complex128_t Function(ffi.Uint32)>>(
          'ndarray_complex128_from_uint32');
  late final _ndarray_complex128_from_uint32 =
      _ndarray_complex128_from_uint32Ptr
          .asFunction<ndarray_complex128_t Function(int)>();

  /// Converts a double-precision complex floating-point number to a
  /// single-precision complex floating-point number.
  /// /
  /// // clang-format off
  ndarray_complex64_t ndarray_complex128_to_complex64(
    ndarray_complex128_t z,
  ) {
    return _ndarray_complex128_to_complex64(
      z,
    );
  }

  late final _ndarray_complex128_to_complex64Ptr = _lookup<
      ffi.NativeFunction<
          ndarray_complex64_t Function(
              ndarray_complex128_t)>>('ndarray_complex128_to_complex64');
  late final _ndarray_complex128_to_complex64 =
      _ndarray_complex128_to_complex64Ptr
          .asFunction<ndarray_complex64_t Function(ndarray_complex128_t)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _NDARRAY_SAFE_CASTS_FLOAT64 =
      _lookup<ffi.Pointer<ffi.Int8>>('NDARRAY_SAFE_CASTS_FLOAT64');

  ffi.Pointer<ffi.Int8> get NDARRAY_SAFE_CASTS_FLOAT64 =>
      _NDARRAY_SAFE_CASTS_FLOAT64.value;

  set NDARRAY_SAFE_CASTS_FLOAT64(ffi.Pointer<ffi.Int8> value) =>
      _NDARRAY_SAFE_CASTS_FLOAT64.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _NDARRAY_SAFE_CASTS_FLOAT32 =
      _lookup<ffi.Pointer<ffi.Int8>>('NDARRAY_SAFE_CASTS_FLOAT32');

  ffi.Pointer<ffi.Int8> get NDARRAY_SAFE_CASTS_FLOAT32 =>
      _NDARRAY_SAFE_CASTS_FLOAT32.value;

  set NDARRAY_SAFE_CASTS_FLOAT32(ffi.Pointer<ffi.Int8> value) =>
      _NDARRAY_SAFE_CASTS_FLOAT32.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _NDARRAY_SAFE_CASTS_UINT64 =
      _lookup<ffi.Pointer<ffi.Int8>>('NDARRAY_SAFE_CASTS_UINT64');

  ffi.Pointer<ffi.Int8> get NDARRAY_SAFE_CASTS_UINT64 =>
      _NDARRAY_SAFE_CASTS_UINT64.value;

  set NDARRAY_SAFE_CASTS_UINT64(ffi.Pointer<ffi.Int8> value) =>
      _NDARRAY_SAFE_CASTS_UINT64.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _NDARRAY_SAFE_CASTS_INT64 =
      _lookup<ffi.Pointer<ffi.Int8>>('NDARRAY_SAFE_CASTS_INT64');

  ffi.Pointer<ffi.Int8> get NDARRAY_SAFE_CASTS_INT64 =>
      _NDARRAY_SAFE_CASTS_INT64.value;

  set NDARRAY_SAFE_CASTS_INT64(ffi.Pointer<ffi.Int8> value) =>
      _NDARRAY_SAFE_CASTS_INT64.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _NDARRAY_SAFE_CASTS_UINT32 =
      _lookup<ffi.Pointer<ffi.Int8>>('NDARRAY_SAFE_CASTS_UINT32');

  ffi.Pointer<ffi.Int8> get NDARRAY_SAFE_CASTS_UINT32 =>
      _NDARRAY_SAFE_CASTS_UINT32.value;

  set NDARRAY_SAFE_CASTS_UINT32(ffi.Pointer<ffi.Int8> value) =>
      _NDARRAY_SAFE_CASTS_UINT32.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _NDARRAY_SAFE_CASTS_INT32 =
      _lookup<ffi.Pointer<ffi.Int8>>('NDARRAY_SAFE_CASTS_INT32');

  ffi.Pointer<ffi.Int8> get NDARRAY_SAFE_CASTS_INT32 =>
      _NDARRAY_SAFE_CASTS_INT32.value;

  set NDARRAY_SAFE_CASTS_INT32(ffi.Pointer<ffi.Int8> value) =>
      _NDARRAY_SAFE_CASTS_INT32.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _NDARRAY_SAFE_CASTS_UINT16 =
      _lookup<ffi.Pointer<ffi.Int8>>('NDARRAY_SAFE_CASTS_UINT16');

  ffi.Pointer<ffi.Int8> get NDARRAY_SAFE_CASTS_UINT16 =>
      _NDARRAY_SAFE_CASTS_UINT16.value;

  set NDARRAY_SAFE_CASTS_UINT16(ffi.Pointer<ffi.Int8> value) =>
      _NDARRAY_SAFE_CASTS_UINT16.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _NDARRAY_SAFE_CASTS_INT16 =
      _lookup<ffi.Pointer<ffi.Int8>>('NDARRAY_SAFE_CASTS_INT16');

  ffi.Pointer<ffi.Int8> get NDARRAY_SAFE_CASTS_INT16 =>
      _NDARRAY_SAFE_CASTS_INT16.value;

  set NDARRAY_SAFE_CASTS_INT16(ffi.Pointer<ffi.Int8> value) =>
      _NDARRAY_SAFE_CASTS_INT16.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _NDARRAY_SAFE_CASTS_UINT8 =
      _lookup<ffi.Pointer<ffi.Int8>>('NDARRAY_SAFE_CASTS_UINT8');

  ffi.Pointer<ffi.Int8> get NDARRAY_SAFE_CASTS_UINT8 =>
      _NDARRAY_SAFE_CASTS_UINT8.value;

  set NDARRAY_SAFE_CASTS_UINT8(ffi.Pointer<ffi.Int8> value) =>
      _NDARRAY_SAFE_CASTS_UINT8.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _NDARRAY_SAFE_CASTS_UINT8C =
      _lookup<ffi.Pointer<ffi.Int8>>('NDARRAY_SAFE_CASTS_UINT8C');

  ffi.Pointer<ffi.Int8> get NDARRAY_SAFE_CASTS_UINT8C =>
      _NDARRAY_SAFE_CASTS_UINT8C.value;

  set NDARRAY_SAFE_CASTS_UINT8C(ffi.Pointer<ffi.Int8> value) =>
      _NDARRAY_SAFE_CASTS_UINT8C.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _NDARRAY_SAFE_CASTS_INT8 =
      _lookup<ffi.Pointer<ffi.Int8>>('NDARRAY_SAFE_CASTS_INT8');

  ffi.Pointer<ffi.Int8> get NDARRAY_SAFE_CASTS_INT8 =>
      _NDARRAY_SAFE_CASTS_INT8.value;

  set NDARRAY_SAFE_CASTS_INT8(ffi.Pointer<ffi.Int8> value) =>
      _NDARRAY_SAFE_CASTS_INT8.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _NDARRAY_SAFE_CASTS_COMPLEX128 =
      _lookup<ffi.Pointer<ffi.Int8>>('NDARRAY_SAFE_CASTS_COMPLEX128');

  ffi.Pointer<ffi.Int8> get NDARRAY_SAFE_CASTS_COMPLEX128 =>
      _NDARRAY_SAFE_CASTS_COMPLEX128.value;

  set NDARRAY_SAFE_CASTS_COMPLEX128(ffi.Pointer<ffi.Int8> value) =>
      _NDARRAY_SAFE_CASTS_COMPLEX128.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _NDARRAY_SAFE_CASTS_COMPLEX64 =
      _lookup<ffi.Pointer<ffi.Int8>>('NDARRAY_SAFE_CASTS_COMPLEX64');

  ffi.Pointer<ffi.Int8> get NDARRAY_SAFE_CASTS_COMPLEX64 =>
      _NDARRAY_SAFE_CASTS_COMPLEX64.value;

  set NDARRAY_SAFE_CASTS_COMPLEX64(ffi.Pointer<ffi.Int8> value) =>
      _NDARRAY_SAFE_CASTS_COMPLEX64.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _NDARRAY_SAFE_CASTS_BOOL =
      _lookup<ffi.Pointer<ffi.Int8>>('NDARRAY_SAFE_CASTS_BOOL');

  ffi.Pointer<ffi.Int8> get NDARRAY_SAFE_CASTS_BOOL =>
      _NDARRAY_SAFE_CASTS_BOOL.value;

  set NDARRAY_SAFE_CASTS_BOOL(ffi.Pointer<ffi.Int8> value) =>
      _NDARRAY_SAFE_CASTS_BOOL.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _NDARRAY_SAFE_CASTS_BINARY =
      _lookup<ffi.Pointer<ffi.Int8>>('NDARRAY_SAFE_CASTS_BINARY');

  ffi.Pointer<ffi.Int8> get NDARRAY_SAFE_CASTS_BINARY =>
      _NDARRAY_SAFE_CASTS_BINARY.value;

  set NDARRAY_SAFE_CASTS_BINARY(ffi.Pointer<ffi.Int8> value) =>
      _NDARRAY_SAFE_CASTS_BINARY.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _NDARRAY_SAFE_CASTS_GENERIC =
      _lookup<ffi.Pointer<ffi.Int8>>('NDARRAY_SAFE_CASTS_GENERIC');

  ffi.Pointer<ffi.Int8> get NDARRAY_SAFE_CASTS_GENERIC =>
      _NDARRAY_SAFE_CASTS_GENERIC.value;

  set NDARRAY_SAFE_CASTS_GENERIC(ffi.Pointer<ffi.Int8> value) =>
      _NDARRAY_SAFE_CASTS_GENERIC.value = value;

  /// Define a table of pointers containing the above casting tables:
  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>>
      _NDARRAY_SAFE_CASTS =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Int8>>>('NDARRAY_SAFE_CASTS');

  ffi.Pointer<ffi.Pointer<ffi.Int8>> get NDARRAY_SAFE_CASTS =>
      _NDARRAY_SAFE_CASTS.value;

  set NDARRAY_SAFE_CASTS(ffi.Pointer<ffi.Pointer<ffi.Int8>> value) =>
      _NDARRAY_SAFE_CASTS.value = value;

  /// Computes the minimum linear index (in bytes) in an underlying data buffer
  /// accessible to an array view.
  int ndarray_min_view_buffer_index(
    int ndims,
    ffi.Pointer<ffi.Int64> shape,
    ffi.Pointer<ffi.Int64> strides,
    int offset,
  ) {
    return _ndarray_min_view_buffer_index(
      ndims,
      shape,
      strides,
      offset,
    );
  }

  late final _ndarray_min_view_buffer_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Int64,
              ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Int64>,
              ffi.Int64)>>('ndarray_min_view_buffer_index');
  late final _ndarray_min_view_buffer_index =
      _ndarray_min_view_buffer_indexPtr.asFunction<
          int Function(
              int, ffi.Pointer<ffi.Int64>, ffi.Pointer<ffi.Int64>, int)>();

  /// Permutes an input array according to a provided index array.
  void ndarray_base_unary_internal_permute(
    int n,
    ffi.Pointer<ffi.Int64> arr,
    ffi.Pointer<ffi.Int64> idx,
    ffi.Pointer<ffi.Int64> out,
  ) {
    return _ndarray_base_unary_internal_permute(
      n,
      arr,
      idx,
      out,
    );
  }

  late final _ndarray_base_unary_internal_permutePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Int64>)>>('ndarray_base_unary_internal_permute');
  late final _ndarray_base_unary_internal_permute =
      _ndarray_base_unary_internal_permutePtr.asFunction<
          void Function(int, ffi.Pointer<ffi.Int64>, ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Int64>)>();

  /// Writes `n` evenly spaced values from `0` to `n-1` to an output array.
  void ndarray_base_unary_internal_range(
    int n,
    ffi.Pointer<ffi.Int64> out,
  ) {
    return _ndarray_base_unary_internal_range(
      n,
      out,
    );
  }

  late final _ndarray_base_unary_internal_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<ffi.Int64>)>>('ndarray_base_unary_internal_range');
  late final _ndarray_base_unary_internal_range =
      _ndarray_base_unary_internal_rangePtr
          .asFunction<void Function(int, ffi.Pointer<ffi.Int64>)>();

  /// Simultaneously sorts two arrays based on the sort order of the first array
  /// using insertion sort.
  void ndarray_base_unary_internal_sort2ins(
    int n,
    ffi.Pointer<ffi.Int64> x,
    ffi.Pointer<ffi.Int64> y,
  ) {
    return _ndarray_base_unary_internal_sort2ins(
      n,
      x,
      y,
    );
  }

  late final _ndarray_base_unary_internal_sort2insPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Int64>)>>('ndarray_base_unary_internal_sort2ins');
  late final _ndarray_base_unary_internal_sort2ins =
      _ndarray_base_unary_internal_sort2insPtr.asFunction<
          void Function(int, ffi.Pointer<ffi.Int64>, ffi.Pointer<ffi.Int64>)>();

  /// Dispatches to a unary ndarray function according to the dimensionality of
  /// provided ndarray arguments.
  int ndarray_unary_dispatch(
    ffi.Pointer<ndarrayUnaryDispatchObject> obj,
    ffi.Pointer<ffi.Pointer<ndarray>> arrays,
    ffi.Pointer<ffi.Void> fcn,
  ) {
    return _ndarray_unary_dispatch(
      obj,
      arrays,
      fcn,
    );
  }

  late final _ndarray_unary_dispatchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(
              ffi.Pointer<ndarrayUnaryDispatchObject>,
              ffi.Pointer<ffi.Pointer<ndarray>>,
              ffi.Pointer<ffi.Void>)>>('ndarray_unary_dispatch');
  late final _ndarray_unary_dispatch = _ndarray_unary_dispatchPtr.asFunction<
      int Function(ffi.Pointer<ndarrayUnaryDispatchObject>,
          ffi.Pointer<ffi.Pointer<ndarray>>, ffi.Pointer<ffi.Void>)>();

  /// Determines the order of a multidimensional array based on a provided
  /// stride array.
  int ndarray_strides2order(
    int ndims,
    ffi.Pointer<ffi.Int64> strides,
  ) {
    return _ndarray_strides2order(
      ndims,
      strides,
    );
  }

  late final _ndarray_strides2orderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(
              ffi.Int64, ffi.Pointer<ffi.Int64>)>>('ndarray_strides2order');
  late final _ndarray_strides2order = _ndarray_strides2orderPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Int64>)>();

  /// Returns the number of bytes per element for a given data type.
  int ndarray_bytes_per_element(
    int dtype,
  ) {
    return _ndarray_bytes_per_element(
      dtype,
    );
  }

  late final _ndarray_bytes_per_elementPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Int32)>>(
          'ndarray_bytes_per_element');
  late final _ndarray_bytes_per_element =
      _ndarray_bytes_per_elementPtr.asFunction<int Function(int)>();

  /// Restricts an index to the interval `[0,max]`.
  ///
  /// @param idx  index
  /// @param max  maximum index (should be nonnegative)
  /// @return     index
  ///
  /// @example
  /// #include "ndarray/base/clamp_index.h"
  ///
  /// int64_t idx = ndarray_clamp_index(10, 8);
  /// // returns 8
  int ndarray_clamp_index(
    int idx,
    int max,
  ) {
    return _ndarray_clamp_index(
      idx,
      max,
    );
  }

  late final _ndarray_clamp_indexPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Int64, ffi.Int64)>>(
          'ndarray_clamp_index');
  late final _ndarray_clamp_index =
      _ndarray_clamp_indexPtr.asFunction<int Function(int, int)>();

  /// Returns the number of non-singleton dimensions.
  int ndarray_nonsingleton_dimensions(
    int ndims,
    ffi.Pointer<ffi.Int64> shape,
  ) {
    return _ndarray_nonsingleton_dimensions(
      ndims,
      shape,
    );
  }

  late final _ndarray_nonsingleton_dimensionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Int64,
              ffi.Pointer<ffi.Int64>)>>('ndarray_nonsingleton_dimensions');
  late final _ndarray_nonsingleton_dimensions =
      _ndarray_nonsingleton_dimensionsPtr
          .asFunction<int Function(int, ffi.Pointer<ffi.Int64>)>();

  /// Generates a stride array from an array shape.
  int ndarray_shape2strides(
    int ndims,
    ffi.Pointer<ffi.Int64> shape,
    int order,
    ffi.Pointer<ffi.Int64> out,
  ) {
    return _ndarray_shape2strides(
      ndims,
      shape,
      order,
      out,
    );
  }

  late final _ndarray_shape2stridesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Int64, ffi.Pointer<ffi.Int64>, ffi.Int32,
              ffi.Pointer<ffi.Int64>)>>('ndarray_shape2strides');
  late final _ndarray_shape2strides = _ndarray_shape2stridesPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int64>, int, ffi.Pointer<ffi.Int64>)>();

  /// Broadcasts array shapes to a single shape.
  int ndarray_broadcast_shapes(
    int M,
    ffi.Pointer<ffi.Pointer<ffi.Int64>> shapes,
    ffi.Pointer<ffi.Int64> ndims,
    ffi.Pointer<ffi.Int64> out,
  ) {
    return _ndarray_broadcast_shapes(
      M,
      shapes,
      ndims,
      out,
    );
  }

  late final _ndarray_broadcast_shapesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(
              ffi.Int64,
              ffi.Pointer<ffi.Pointer<ffi.Int64>>,
              ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Int64>)>>('ndarray_broadcast_shapes');
  late final _ndarray_broadcast_shapes =
      _ndarray_broadcast_shapesPtr.asFunction<
          int Function(int, ffi.Pointer<ffi.Pointer<ffi.Int64>>,
              ffi.Pointer<ffi.Int64>, ffi.Pointer<ffi.Int64>)>();

  /// Converts a linear index to an array of subscripts.
  int ndarray_ind2sub(
    int ndims,
    ffi.Pointer<ffi.Int64> shape,
    ffi.Pointer<ffi.Int64> strides,
    int offset,
    int order,
    int idx,
    int mode,
    ffi.Pointer<ffi.Int64> out,
  ) {
    return _ndarray_ind2sub(
      ndims,
      shape,
      strides,
      offset,
      order,
      idx,
      mode,
      out,
    );
  }

  late final _ndarray_ind2subPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(
              ffi.Int64,
              ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Int64>,
              ffi.Int64,
              ffi.Int32,
              ffi.Int64,
              ffi.Int32,
              ffi.Pointer<ffi.Int64>)>>('ndarray_ind2sub');
  late final _ndarray_ind2sub = _ndarray_ind2subPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int64>, ffi.Pointer<ffi.Int64>, int,
          int, int, int, ffi.Pointer<ffi.Int64>)>();

  /// Returns the single letter character abbreviation for a given data type.
  int ndarray_dtype_char(
    int dtype,
  ) {
    return _ndarray_dtype_char(
      dtype,
    );
  }

  late final _ndarray_dtype_charPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Int32)>>(
          'ndarray_dtype_char');
  late final _ndarray_dtype_char =
      _ndarray_dtype_charPtr.asFunction<int Function(int)>();

  /// Computes the maximum linear index (in bytes) in an underlying data buffer
  /// accessible to an array view.
  int ndarray_max_view_buffer_index(
    int ndims,
    ffi.Pointer<ffi.Int64> shape,
    ffi.Pointer<ffi.Int64> strides,
    int offset,
  ) {
    return _ndarray_max_view_buffer_index(
      ndims,
      shape,
      strides,
      offset,
    );
  }

  late final _ndarray_max_view_buffer_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Int64,
              ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Int64>,
              ffi.Int64)>>('ndarray_max_view_buffer_index');
  late final _ndarray_max_view_buffer_index =
      _ndarray_max_view_buffer_indexPtr.asFunction<
          int Function(
              int, ffi.Pointer<ffi.Int64>, ffi.Pointer<ffi.Int64>, int)>();

  /// Returns a pointer to a dynamically allocated ndarray function object.
  ffi.Pointer<ndarrayFunctionObject> ndarray_function_allocate(
    ffi.Pointer<ffi.Char> name,
    int nin,
    int nout,
    ffi.Pointer<ndarrayFcn> functions,
    int nfunctions,
    ffi.Pointer<ffi.Int32> types,
    ffi.Pointer<ffi.Pointer<ffi.Void>> data,
  ) {
    return _ndarray_function_allocate(
      name,
      nin,
      nout,
      functions,
      nfunctions,
      types,
      data,
    );
  }

  late final _ndarray_function_allocatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ndarrayFunctionObject> Function(
                  ffi.Pointer<ffi.Char>,
                  ffi.Int32,
                  ffi.Int32,
                  ffi.Pointer<ndarrayFcn>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Int32>,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'ndarray_function_allocate');
  late final _ndarray_function_allocate =
      _ndarray_function_allocatePtr.asFunction<
          ffi.Pointer<ndarrayFunctionObject> Function(
              ffi.Pointer<ffi.Char>,
              int,
              int,
              ffi.Pointer<ndarrayFcn>,
              int,
              ffi.Pointer<ffi.Int32>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  /// Frees an ndarray function object's allocated memory.
  void ndarray_function_free(
    ffi.Pointer<ndarrayFunctionObject> obj,
  ) {
    return _ndarray_function_free(
      obj,
    );
  }

  late final _ndarray_function_freePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ndarrayFunctionObject>)>>('ndarray_function_free');
  late final _ndarray_function_free = _ndarray_function_freePtr
      .asFunction<void Function(ffi.Pointer<ndarrayFunctionObject>)>();

  /// Returns the first index of a function whose signature satisfies a provided
  /// list of array types.
  int ndarray_function_dispatch_index_of(
    ffi.Pointer<ndarrayFunctionObject> obj,
    ffi.Pointer<ffi.Int32> types,
  ) {
    return _ndarray_function_dispatch_index_of(
      obj,
      types,
    );
  }

  late final _ndarray_function_dispatch_index_ofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<ndarrayFunctionObject>,
              ffi.Pointer<ffi.Int32>)>>('ndarray_function_dispatch_index_of');
  late final _ndarray_function_dispatch_index_of =
      _ndarray_function_dispatch_index_ofPtr.asFunction<
          int Function(
              ffi.Pointer<ndarrayFunctionObject>, ffi.Pointer<ffi.Int32>)>();

  /// Computes the minimum and maximum linear indices (in bytes) in an
  /// underlying data buffer accessible to an array view.
  int ndarray_minmax_view_buffer_index(
    int ndims,
    ffi.Pointer<ffi.Int64> shape,
    ffi.Pointer<ffi.Int64> strides,
    int offset,
    ffi.Pointer<ffi.Int64> out,
  ) {
    return _ndarray_minmax_view_buffer_index(
      ndims,
      shape,
      strides,
      offset,
      out,
    );
  }

  late final _ndarray_minmax_view_buffer_indexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(
              ffi.Int64,
              ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Int64>,
              ffi.Int64,
              ffi.Pointer<ffi.Int64>)>>('ndarray_minmax_view_buffer_index');
  late final _ndarray_minmax_view_buffer_index =
      _ndarray_minmax_view_buffer_indexPtr.asFunction<
          int Function(int, ffi.Pointer<ffi.Int64>, ffi.Pointer<ffi.Int64>, int,
              ffi.Pointer<ffi.Int64>)>();

  /// Converts a linear index in an array view to a linear index in an underlying
  /// data buffer.
  int ndarray_vind2bind(
    int ndims,
    ffi.Pointer<ffi.Int64> shape,
    ffi.Pointer<ffi.Int64> strides,
    int offset,
    int order,
    int idx,
    int mode,
  ) {
    return _ndarray_vind2bind(
      ndims,
      shape,
      strides,
      offset,
      order,
      idx,
      mode,
    );
  }

  late final _ndarray_vind2bindPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Int64,
              ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Int64>,
              ffi.Int64,
              ffi.Int32,
              ffi.Int64,
              ffi.Int32)>>('ndarray_vind2bind');
  late final _ndarray_vind2bind = _ndarray_vind2bindPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int64>, ffi.Pointer<ffi.Int64>, int,
          int, int, int)>();

  /// Returns the index offset which specifies the location of the first indexed
  /// value in a multidimensional array based on a stride array.
  int ndarray_strides2offset(
    int ndims,
    ffi.Pointer<ffi.Int64> shape,
    ffi.Pointer<ffi.Int64> strides,
  ) {
    return _ndarray_strides2offset(
      ndims,
      shape,
      strides,
    );
  }

  late final _ndarray_strides2offsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Int64, ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Int64>)>>('ndarray_strides2offset');
  late final _ndarray_strides2offset = _ndarray_strides2offsetPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int64>, ffi.Pointer<ffi.Int64>)>();

  /// Converts a linear index in an underlying data buffer to a linear index in an
  /// array view.
  int ndarray_bind2vind(
    int ndims,
    ffi.Pointer<ffi.Int64> shape,
    ffi.Pointer<ffi.Int64> strides,
    int offset,
    int order,
    int idx,
    int mode,
  ) {
    return _ndarray_bind2vind(
      ndims,
      shape,
      strides,
      offset,
      order,
      idx,
      mode,
    );
  }

  late final _ndarray_bind2vindPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Int64,
              ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Int64>,
              ffi.Int64,
              ffi.Int32,
              ffi.Int64,
              ffi.Int32)>>('ndarray_bind2vind');
  late final _ndarray_bind2vind = _ndarray_bind2vindPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int64>, ffi.Pointer<ffi.Int64>, int,
          int, int, int)>();

  /// Returns the number of elements in an array.
  int ndarray_numel(
    int ndims,
    ffi.Pointer<ffi.Int64> shape,
  ) {
    return _ndarray_numel(
      ndims,
      shape,
    );
  }

  late final _ndarray_numelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Int64, ffi.Pointer<ffi.Int64>)>>('ndarray_numel');
  late final _ndarray_numel =
      _ndarray_numelPtr.asFunction<int Function(int, ffi.Pointer<ffi.Int64>)>();

  /// Returns an index given an index mode.
  ///
  /// ## Notes
  ///
  /// -   The function returns `-1` if an index is out-of-bounds.
  ///
  /// @param idx   index
  /// @param max   maximum index (should be nonnegative)
  /// @param mode  index mode specifying how to handle an index outside the
  /// interval `[0,max]`
  /// @return      index
  ///
  /// @example
  /// #include "ndarray/index_modes.h"
  /// #include "ndarray/base/ind.h"
  ///
  /// int64_t idx = ndarray_ind(10, 8, NDARRAY_INDEX_CLAMP);
  /// // returns 8
  ///
  /// @example
  /// #include "ndarray/index_modes.h"
  /// #include "ndarray/base/ind.h"
  ///
  /// int64_t idx = ndarray_ind(13, 10, NDARRAY_INDEX_WRAP);
  /// // returns 2
  ///
  /// @example
  /// #include "ndarray/index_modes.h"
  /// #include "ndarray/base/ind.h"
  ///
  /// int64_t idx = ndarray_ind(10, 8, NDARRAY_INDEX_ERROR);
  /// // returns -1
  int ndarray_ind(
    int idx,
    int max,
    int mode,
  ) {
    return _ndarray_ind(
      idx,
      max,
      mode,
    );
  }

  late final _ndarray_indPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Int64, ffi.Int64, ffi.Int32)>>('ndarray_ind');
  late final _ndarray_ind =
      _ndarray_indPtr.asFunction<int Function(int, int, int)>();

  /// Wraps an index on the interval `[0,max]`.
  int ndarray_wrap_index(
    int idx,
    int max,
  ) {
    return _ndarray_wrap_index(
      idx,
      max,
    );
  }

  late final _ndarray_wrap_indexPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Int64, ffi.Int64)>>(
          'ndarray_wrap_index');
  late final _ndarray_wrap_index =
      _ndarray_wrap_indexPtr.asFunction<int Function(int, int)>();

  /// Returns the number of singleton dimensions.
  int ndarray_singleton_dimensions(
    int ndims,
    ffi.Pointer<ffi.Int64> shape,
  ) {
    return _ndarray_singleton_dimensions(
      ndims,
      shape,
    );
  }

  late final _ndarray_singleton_dimensionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Int64,
              ffi.Pointer<ffi.Int64>)>>('ndarray_singleton_dimensions');
  late final _ndarray_singleton_dimensions = _ndarray_singleton_dimensionsPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Int64>)>();

  /// Determines array iteration order, given a stride array.
  int ndarray_iteration_order(
    int ndims,
    ffi.Pointer<ffi.Int64> strides,
  ) {
    return _ndarray_iteration_order(
      ndims,
      strides,
    );
  }

  late final _ndarray_iteration_orderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(
              ffi.Int64, ffi.Pointer<ffi.Int64>)>>('ndarray_iteration_order');
  late final _ndarray_iteration_order = _ndarray_iteration_orderPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Int64>)>();

  /// Determines if an array data type can be cast to another data type according
  /// to a specified casting rule.
  int ndarray_is_allowed_data_type_cast(
    int from,
    int to,
    int casting,
  ) {
    return _ndarray_is_allowed_data_type_cast(
      from,
      to,
      casting,
    );
  }

  late final _ndarray_is_allowed_data_type_castPtr = _lookup<
          ffi.NativeFunction<ffi.Int8 Function(ffi.Int8, ffi.Int8, ffi.Int32)>>(
      'ndarray_is_allowed_data_type_cast');
  late final _ndarray_is_allowed_data_type_cast =
      _ndarray_is_allowed_data_type_castPtr
          .asFunction<int Function(int, int, int)>();

  /// Determines if a buffer length is compatible with provided ndarray meta data.
  int ndarray_is_buffer_length_compatible(
    int dtype,
    int len,
    int ndims,
    ffi.Pointer<ffi.Int64> shape,
    ffi.Pointer<ffi.Int64> strides,
    int offset,
  ) {
    return _ndarray_is_buffer_length_compatible(
      dtype,
      len,
      ndims,
      shape,
      strides,
      offset,
    );
  }

  late final _ndarray_is_buffer_length_compatiblePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(
              ffi.Int32,
              ffi.Int64,
              ffi.Int64,
              ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Int64>,
              ffi.Int64)>>('ndarray_is_buffer_length_compatible');
  late final _ndarray_is_buffer_length_compatible =
      _ndarray_is_buffer_length_compatiblePtr.asFunction<
          int Function(int, int, int, ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Int64>, int)>();

  /// Determines if a buffer length is compatible with a provided shape array.
  int ndarray_is_buffer_length_compatible_shape(
    int len,
    int ndims,
    ffi.Pointer<ffi.Int64> shape,
  ) {
    return _ndarray_is_buffer_length_compatible_shape(
      len,
      ndims,
      shape,
    );
  }

  late final _ndarray_is_buffer_length_compatible_shapePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int8 Function(ffi.Int64, ffi.Int64, ffi.Pointer<ffi.Int64>)>>(
      'ndarray_is_buffer_length_compatible_shape');
  late final _ndarray_is_buffer_length_compatible_shape =
      _ndarray_is_buffer_length_compatible_shapePtr
          .asFunction<int Function(int, int, ffi.Pointer<ffi.Int64>)>();

  /// Determines if an array is column-major based on a provided stride array.
  int ndarray_is_column_major(
    int ndims,
    ffi.Pointer<ffi.Int64> strides,
  ) {
    return _ndarray_is_column_major(
      ndims,
      strides,
    );
  }

  late final _ndarray_is_column_majorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(
              ffi.Int64, ffi.Pointer<ffi.Int64>)>>('ndarray_is_column_major');
  late final _ndarray_is_column_major = _ndarray_is_column_majorPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Int64>)>();

  /// Determines if an array is column-major contiguous.
  int ndarray_is_column_major_contiguous(
    int dtype,
    int ndims,
    ffi.Pointer<ffi.Int64> shape,
    ffi.Pointer<ffi.Int64> strides,
    int offset,
  ) {
    return _ndarray_is_column_major_contiguous(
      dtype,
      ndims,
      shape,
      strides,
      offset,
    );
  }

  late final _ndarray_is_column_major_contiguousPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(
              ffi.Int32,
              ffi.Int64,
              ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Int64>,
              ffi.Int64)>>('ndarray_is_column_major_contiguous');
  late final _ndarray_is_column_major_contiguous =
      _ndarray_is_column_major_contiguousPtr.asFunction<
          int Function(
              int, int, ffi.Pointer<ffi.Int64>, ffi.Pointer<ffi.Int64>, int)>();

  /// Determines if an array is contiguous.
  int ndarray_is_contiguous(
    int dtype,
    int ndims,
    ffi.Pointer<ffi.Int64> shape,
    ffi.Pointer<ffi.Int64> strides,
    int offset,
  ) {
    return _ndarray_is_contiguous(
      dtype,
      ndims,
      shape,
      strides,
      offset,
    );
  }

  late final _ndarray_is_contiguousPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Int32, ffi.Int64, ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Int64>, ffi.Int64)>>('ndarray_is_contiguous');
  late final _ndarray_is_contiguous = _ndarray_is_contiguousPtr.asFunction<
      int Function(
          int, int, ffi.Pointer<ffi.Int64>, ffi.Pointer<ffi.Int64>, int)>();

  /// Determines if an array is row-major based on a provided stride array.
  int ndarray_is_row_major(
    int ndims,
    ffi.Pointer<ffi.Int64> strides,
  ) {
    return _ndarray_is_row_major(
      ndims,
      strides,
    );
  }

  late final _ndarray_is_row_majorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(
              ffi.Int64, ffi.Pointer<ffi.Int64>)>>('ndarray_is_row_major');
  late final _ndarray_is_row_major = _ndarray_is_row_majorPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Int64>)>();

  /// Determines if an array is row-major contiguous.
  int ndarray_is_row_major_contiguous(
    int dtype,
    int ndims,
    ffi.Pointer<ffi.Int64> shape,
    ffi.Pointer<ffi.Int64> strides,
    int offset,
  ) {
    return _ndarray_is_row_major_contiguous(
      dtype,
      ndims,
      shape,
      strides,
      offset,
    );
  }

  late final _ndarray_is_row_major_contiguousPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(
              ffi.Int32,
              ffi.Int64,
              ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Int64>,
              ffi.Int64)>>('ndarray_is_row_major_contiguous');
  late final _ndarray_is_row_major_contiguous =
      _ndarray_is_row_major_contiguousPtr.asFunction<
          int Function(
              int, int, ffi.Pointer<ffi.Int64>, ffi.Pointer<ffi.Int64>, int)>();

  /// Determines if an array data type can be safely cast to another data type.
  int ndarray_is_safe_data_type_cast(
    int from,
    int to,
  ) {
    return _ndarray_is_safe_data_type_cast(
      from,
      to,
    );
  }

  late final _ndarray_is_safe_data_type_castPtr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Int8, ffi.Int8)>>(
          'ndarray_is_safe_data_type_cast');
  late final _ndarray_is_safe_data_type_cast =
      _ndarray_is_safe_data_type_castPtr.asFunction<int Function(int, int)>();

  /// Determines if an array data type can be safely cast to, or is of the same
  /// "kind" as, another data type.
  int ndarray_is_same_kind_data_type_cast(
    int from,
    int to,
  ) {
    return _ndarray_is_same_kind_data_type_cast(
      from,
      to,
    );
  }

  late final _ndarray_is_same_kind_data_type_castPtr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Int8, ffi.Int8)>>(
          'ndarray_is_same_kind_data_type_cast');
  late final _ndarray_is_same_kind_data_type_cast =
      _ndarray_is_same_kind_data_type_castPtr
          .asFunction<int Function(int, int)>();

  /// Determines if an array is compatible with a single memory segment.
  int ndarray_is_single_segment_compatible(
    int dtype,
    int ndims,
    ffi.Pointer<ffi.Int64> shape,
    ffi.Pointer<ffi.Int64> strides,
    int offset,
  ) {
    return _ndarray_is_single_segment_compatible(
      dtype,
      ndims,
      shape,
      strides,
      offset,
    );
  }

  late final _ndarray_is_single_segment_compatiblePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(
              ffi.Int32,
              ffi.Int64,
              ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Int64>,
              ffi.Int64)>>('ndarray_is_single_segment_compatible');
  late final _ndarray_is_single_segment_compatible =
      _ndarray_is_single_segment_compatiblePtr.asFunction<
          int Function(
              int, int, ffi.Pointer<ffi.Int64>, ffi.Pointer<ffi.Int64>, int)>();

  /// Converts subscripts to a linear index.
  int ndarray_sub2ind(
    int ndims,
    ffi.Pointer<ffi.Int64> shape,
    ffi.Pointer<ffi.Int64> strides,
    int offset,
    ffi.Pointer<ffi.Int64> sub,
    int nmodes,
    ffi.Pointer<ffi.Int8> modes,
  ) {
    return _ndarray_sub2ind(
      ndims,
      shape,
      strides,
      offset,
      sub,
      nmodes,
      modes,
    );
  }

  late final _ndarray_sub2indPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Int64,
              ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Int64>,
              ffi.Int64,
              ffi.Pointer<ffi.Int64>,
              ffi.Int64,
              ffi.Pointer<ffi.Int8>)>>('ndarray_sub2ind');
  late final _ndarray_sub2ind = _ndarray_sub2indPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int64>, ffi.Pointer<ffi.Int64>, int,
          ffi.Pointer<ffi.Int64>, int, ffi.Pointer<ffi.Int8>)>();

  ffi.Pointer<ffi.Char> VersionString() {
    return _VersionString();
  }

  late final _VersionStringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'VersionString');
  late final _VersionString =
      _VersionStringPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  int InitDartApiDL(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _InitDartApiDL(
      data,
    );
  }

  late final _InitDartApiDLPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'InitDartApiDL');
  late final _InitDartApiDL =
      _InitDartApiDLPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  /// Returns a pointer to a dynamically allocated ndarray.
  ffi.Pointer<ndarray> ndarray_allocate(
    int dtype,
    ffi.Pointer<ffi.Uint8> data,
    int ndims,
    ffi.Pointer<ffi.Int64> shape,
    ffi.Pointer<ffi.Int64> strides,
    int offset,
    int order,
    int imode,
    int nsubmodes,
    ffi.Pointer<ffi.Int8> submodes,
  ) {
    return _ndarray_allocate(
      dtype,
      data,
      ndims,
      shape,
      strides,
      offset,
      order,
      imode,
      nsubmodes,
      submodes,
    );
  }

  late final _ndarray_allocatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ndarray> Function(
              ffi.Int16,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int64,
              ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Int64>,
              ffi.Int64,
              ffi.Int8,
              ffi.Int8,
              ffi.Int64,
              ffi.Pointer<ffi.Int8>)>>('ndarray_allocate');
  late final _ndarray_allocate = _ndarray_allocatePtr.asFunction<
      ffi.Pointer<ndarray> Function(
          int,
          ffi.Pointer<ffi.Uint8>,
          int,
          ffi.Pointer<ffi.Int64>,
          ffi.Pointer<ffi.Int64>,
          int,
          int,
          int,
          int,
          ffi.Pointer<ffi.Int8>)>();

  /// Returns the size of an ndarray (in bytes).
  int ndarray_bytelength(
    ffi.Pointer<ndarray> arr,
  ) {
    return _ndarray_bytelength(
      arr,
    );
  }

  late final _ndarray_bytelengthPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ndarray>)>>(
          'ndarray_bytelength');
  late final _ndarray_bytelength =
      _ndarray_bytelengthPtr.asFunction<int Function(ffi.Pointer<ndarray>)>();

  /// Returns a pointer to an ndarray's underlying byte array.
  ffi.Pointer<ffi.Uint8> ndarray_data(
    ffi.Pointer<ndarray> arr,
  ) {
    return _ndarray_data(
      arr,
    );
  }

  late final _ndarray_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(
              ffi.Pointer<ndarray>)>>('ndarray_data');
  late final _ndarray_data = _ndarray_dataPtr
      .asFunction<ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<ndarray>)>();

  /// Returns an ndarray dimension.
  int ndarray_dimension(
    ffi.Pointer<ndarray> arr,
    int i,
  ) {
    return _ndarray_dimension(
      arr,
      i,
    );
  }

  late final _ndarray_dimensionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<ndarray>, ffi.Int64)>>('ndarray_dimension');
  late final _ndarray_dimension = _ndarray_dimensionPtr
      .asFunction<int Function(ffi.Pointer<ndarray>, int)>();

  /// Disables specified ndarray flags.
  int ndarray_disable_flags(
    ffi.Pointer<ndarray> arr,
    int flags,
  ) {
    return _ndarray_disable_flags(
      arr,
      flags,
    );
  }

  late final _ndarray_disable_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(
              ffi.Pointer<ndarray>, ffi.Int64)>>('ndarray_disable_flags');
  late final _ndarray_disable_flags = _ndarray_disable_flagsPtr
      .asFunction<int Function(ffi.Pointer<ndarray>, int)>();

  /// Returns an ndarray data type.
  int ndarray_dtype(
    ffi.Pointer<ndarray> arr,
  ) {
    return _ndarray_dtype(
      arr,
    );
  }

  late final _ndarray_dtypePtr =
      _lookup<ffi.NativeFunction<ffi.Int16 Function(ffi.Pointer<ndarray>)>>(
          'ndarray_dtype');
  late final _ndarray_dtype =
      _ndarray_dtypePtr.asFunction<int Function(ffi.Pointer<ndarray>)>();

  /// Enables specified ndarray flags.
  int ndarray_enable_flags(
    ffi.Pointer<ndarray> arr,
    int flags,
  ) {
    return _ndarray_enable_flags(
      arr,
      flags,
    );
  }

  late final _ndarray_enable_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(
              ffi.Pointer<ndarray>, ffi.Int64)>>('ndarray_enable_flags');
  late final _ndarray_enable_flags = _ndarray_enable_flagsPtr
      .asFunction<int Function(ffi.Pointer<ndarray>, int)>();

  /// Returns ndarray flags.
  int ndarray_flags(
    ffi.Pointer<ndarray> arr,
  ) {
    return _ndarray_flags(
      arr,
    );
  }

  late final _ndarray_flagsPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ndarray>)>>(
          'ndarray_flags');
  late final _ndarray_flags =
      _ndarray_flagsPtr.asFunction<int Function(ffi.Pointer<ndarray>)>();

  /// Frees an ndarray's allocated memory.
  void ndarray_free(
    ffi.Pointer<ndarray> arr,
  ) {
    return _ndarray_free(
      arr,
    );
  }

  late final _ndarray_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ndarray>)>>(
          'ndarray_free');
  late final _ndarray_free =
      _ndarray_freePtr.asFunction<void Function(ffi.Pointer<ndarray>)>();

  /// Tests whether an ndarray has specified flags enabled.
  int ndarray_has_flags(
    ffi.Pointer<ndarray> arr,
    int flags,
  ) {
    return _ndarray_has_flags(
      arr,
      flags,
    );
  }

  late final _ndarray_has_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(
              ffi.Pointer<ndarray>, ffi.Int64)>>('ndarray_has_flags');
  late final _ndarray_has_flags = _ndarray_has_flagsPtr
      .asFunction<int Function(ffi.Pointer<ndarray>, int)>();

  /// Returns the index mode of an ndarray.
  int ndarray_index_mode(
    ffi.Pointer<ndarray> arr,
  ) {
    return _ndarray_index_mode(
      arr,
    );
  }

  late final _ndarray_index_modePtr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Pointer<ndarray>)>>(
          'ndarray_index_mode');
  late final _ndarray_index_mode =
      _ndarray_index_modePtr.asFunction<int Function(ffi.Pointer<ndarray>)>();

  /// Returns the number of elements in an ndarray.
  int ndarray_length(
    ffi.Pointer<ndarray> arr,
  ) {
    return _ndarray_length(
      arr,
    );
  }

  late final _ndarray_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ndarray>)>>(
          'ndarray_length');
  late final _ndarray_length =
      _ndarray_lengthPtr.asFunction<int Function(ffi.Pointer<ndarray>)>();

  /// Returns the number of ndarray dimensions.
  int ndarray_ndims(
    ffi.Pointer<ndarray> arr,
  ) {
    return _ndarray_ndims(
      arr,
    );
  }

  late final _ndarray_ndimsPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ndarray>)>>(
          'ndarray_ndims');
  late final _ndarray_ndims =
      _ndarray_ndimsPtr.asFunction<int Function(ffi.Pointer<ndarray>)>();

  /// Returns an ndarray index offset (in bytes).
  int ndarray_offset(
    ffi.Pointer<ndarray> arr,
  ) {
    return _ndarray_offset(
      arr,
    );
  }

  late final _ndarray_offsetPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ndarray>)>>(
          'ndarray_offset');
  late final _ndarray_offset =
      _ndarray_offsetPtr.asFunction<int Function(ffi.Pointer<ndarray>)>();

  /// Returns the order of an ndarray.
  int ndarray_order(
    ffi.Pointer<ndarray> arr,
  ) {
    return _ndarray_order(
      arr,
    );
  }

  late final _ndarray_orderPtr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Pointer<ndarray>)>>(
          'ndarray_order');
  late final _ndarray_order =
      _ndarray_orderPtr.asFunction<int Function(ffi.Pointer<ndarray>)>();

  /// Returns the number of ndarray subscript modes.
  int ndarray_nsubmodes(
    ffi.Pointer<ndarray> arr,
  ) {
    return _ndarray_nsubmodes(
      arr,
    );
  }

  late final _ndarray_nsubmodesPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Pointer<ndarray>)>>(
          'ndarray_nsubmodes');
  late final _ndarray_nsubmodes =
      _ndarray_nsubmodesPtr.asFunction<int Function(ffi.Pointer<ndarray>)>();

  /// Returns a pointer to an array containing an ndarray shape (dimensions).
  ffi.Pointer<ffi.Int64> ndarray_shape(
    ffi.Pointer<ndarray> arr,
  ) {
    return _ndarray_shape(
      arr,
    );
  }

  late final _ndarray_shapePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int64> Function(
              ffi.Pointer<ndarray>)>>('ndarray_shape');
  late final _ndarray_shape = _ndarray_shapePtr
      .asFunction<ffi.Pointer<ffi.Int64> Function(ffi.Pointer<ndarray>)>();

  /// Returns an ndarray stride (in bytes).
  int ndarray_stride(
    ffi.Pointer<ndarray> arr,
    int i,
  ) {
    return _ndarray_stride(
      arr,
      i,
    );
  }

  late final _ndarray_stridePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<ndarray>, ffi.Int64)>>('ndarray_stride');
  late final _ndarray_stride =
      _ndarray_stridePtr.asFunction<int Function(ffi.Pointer<ndarray>, int)>();

  /// Returns a pointer to an array containing ndarray strides (in bytes).
  ffi.Pointer<ffi.Int64> ndarray_strides(
    ffi.Pointer<ndarray> arr,
  ) {
    return _ndarray_strides(
      arr,
    );
  }

  late final _ndarray_stridesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int64> Function(
              ffi.Pointer<ndarray>)>>('ndarray_strides');
  late final _ndarray_strides = _ndarray_stridesPtr
      .asFunction<ffi.Pointer<ffi.Int64> Function(ffi.Pointer<ndarray>)>();

  /// Returns ndarray subscript modes.
  ffi.Pointer<ffi.Int8> ndarray_submodes(
    ffi.Pointer<ndarray> arr,
  ) {
    return _ndarray_submodes(
      arr,
    );
  }

  late final _ndarray_submodesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int8> Function(
              ffi.Pointer<ndarray>)>>('ndarray_submodes');
  late final _ndarray_submodes = _ndarray_submodesPtr
      .asFunction<ffi.Pointer<ffi.Int8> Function(ffi.Pointer<ndarray>)>();

  /// Returns an ndarray subscript mode.
  int ndarray_submode(
    ffi.Pointer<ndarray> arr,
    int i,
  ) {
    return _ndarray_submode(
      arr,
      i,
    );
  }

  late final _ndarray_submodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(
              ffi.Pointer<ndarray>, ffi.Int64)>>('ndarray_submode');
  late final _ndarray_submode =
      _ndarray_submodePtr.asFunction<int Function(ffi.Pointer<ndarray>, int)>();

  /// Returns an ndarray data element.
  int ndarray_get(
    ffi.Pointer<ndarray> arr,
    ffi.Pointer<ffi.Int64> sub,
    ffi.Pointer<ffi.Void> out,
  ) {
    return _ndarray_get(
      arr,
      sub,
      out,
    );
  }

  late final _ndarray_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Void>)>>('ndarray_get');
  late final _ndarray_get = _ndarray_getPtr.asFunction<
      int Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>,
          ffi.Pointer<ffi.Void>)>();

  /// Returns a double-precision floating-point ndarray data element.
  int ndarray_get_float64(
    ffi.Pointer<ndarray> arr,
    ffi.Pointer<ffi.Int64> sub,
    ffi.Pointer<ffi.Double> out,
  ) {
    return _ndarray_get_float64(
      arr,
      sub,
      out,
    );
  }

  late final _ndarray_get_float64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Double>)>>('ndarray_get_float64');
  late final _ndarray_get_float64 = _ndarray_get_float64Ptr.asFunction<
      int Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>,
          ffi.Pointer<ffi.Double>)>();

  /// Returns a single-precision floating-point ndarray data element.
  int ndarray_get_float32(
    ffi.Pointer<ndarray> arr,
    ffi.Pointer<ffi.Int64> sub,
    ffi.Pointer<ffi.Float> out,
  ) {
    return _ndarray_get_float32(
      arr,
      sub,
      out,
    );
  }

  late final _ndarray_get_float32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Float>)>>('ndarray_get_float32');
  late final _ndarray_get_float32 = _ndarray_get_float32Ptr.asFunction<
      int Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>,
          ffi.Pointer<ffi.Float>)>();

  /// Returns an unsigned 64-bit integer ndarray data element.
  int ndarray_get_uint64(
    ffi.Pointer<ndarray> arr,
    ffi.Pointer<ffi.Int64> sub,
    ffi.Pointer<ffi.Uint64> out,
  ) {
    return _ndarray_get_uint64(
      arr,
      sub,
      out,
    );
  }

  late final _ndarray_get_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Uint64>)>>('ndarray_get_uint64');
  late final _ndarray_get_uint64 = _ndarray_get_uint64Ptr.asFunction<
      int Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>,
          ffi.Pointer<ffi.Uint64>)>();

  /// Returns a signed 64-bit integer ndarray data element.
  int ndarray_get_int64(
    ffi.Pointer<ndarray> arr,
    ffi.Pointer<ffi.Int64> sub,
    ffi.Pointer<ffi.Int64> out,
  ) {
    return _ndarray_get_int64(
      arr,
      sub,
      out,
    );
  }

  late final _ndarray_get_int64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Int64>)>>('ndarray_get_int64');
  late final _ndarray_get_int64 = _ndarray_get_int64Ptr.asFunction<
      int Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>,
          ffi.Pointer<ffi.Int64>)>();

  /// Returns an unsigned 32-bit integer ndarray data element.
  int ndarray_get_uint32(
    ffi.Pointer<ndarray> arr,
    ffi.Pointer<ffi.Int64> sub,
    ffi.Pointer<ffi.Uint32> out,
  ) {
    return _ndarray_get_uint32(
      arr,
      sub,
      out,
    );
  }

  late final _ndarray_get_uint32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Uint32>)>>('ndarray_get_uint32');
  late final _ndarray_get_uint32 = _ndarray_get_uint32Ptr.asFunction<
      int Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>,
          ffi.Pointer<ffi.Uint32>)>();

  /// Returns a signed 32-bit integer ndarray data element.
  int ndarray_get_int32(
    ffi.Pointer<ndarray> arr,
    ffi.Pointer<ffi.Int64> sub,
    ffi.Pointer<ffi.Int32> out,
  ) {
    return _ndarray_get_int32(
      arr,
      sub,
      out,
    );
  }

  late final _ndarray_get_int32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Int32>)>>('ndarray_get_int32');
  late final _ndarray_get_int32 = _ndarray_get_int32Ptr.asFunction<
      int Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>,
          ffi.Pointer<ffi.Int32>)>();

  /// Returns an unsigned 16-bit integer ndarray data element.
  int ndarray_get_uint16(
    ffi.Pointer<ndarray> arr,
    ffi.Pointer<ffi.Int64> sub,
    ffi.Pointer<ffi.Uint16> out,
  ) {
    return _ndarray_get_uint16(
      arr,
      sub,
      out,
    );
  }

  late final _ndarray_get_uint16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Uint16>)>>('ndarray_get_uint16');
  late final _ndarray_get_uint16 = _ndarray_get_uint16Ptr.asFunction<
      int Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>,
          ffi.Pointer<ffi.Uint16>)>();

  /// Returns a signed 16-bit integer ndarray data element.
  int ndarray_get_int16(
    ffi.Pointer<ndarray> arr,
    ffi.Pointer<ffi.Int64> sub,
    ffi.Pointer<ffi.Int16> out,
  ) {
    return _ndarray_get_int16(
      arr,
      sub,
      out,
    );
  }

  late final _ndarray_get_int16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Int16>)>>('ndarray_get_int16');
  late final _ndarray_get_int16 = _ndarray_get_int16Ptr.asFunction<
      int Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>,
          ffi.Pointer<ffi.Int16>)>();

  /// Returns an unsigned 8-bit integer ndarray data element.
  int ndarray_get_uint8(
    ffi.Pointer<ndarray> arr,
    ffi.Pointer<ffi.Int64> sub,
    ffi.Pointer<ffi.Uint8> out,
  ) {
    return _ndarray_get_uint8(
      arr,
      sub,
      out,
    );
  }

  late final _ndarray_get_uint8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Uint8>)>>('ndarray_get_uint8');
  late final _ndarray_get_uint8 = _ndarray_get_uint8Ptr.asFunction<
      int Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>,
          ffi.Pointer<ffi.Uint8>)>();

  /// Returns a signed 8-bit integer ndarray data element.
  int ndarray_get_int8(
    ffi.Pointer<ndarray> arr,
    ffi.Pointer<ffi.Int64> sub,
    ffi.Pointer<ffi.Int8> out,
  ) {
    return _ndarray_get_int8(
      arr,
      sub,
      out,
    );
  }

  late final _ndarray_get_int8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Int8>)>>('ndarray_get_int8');
  late final _ndarray_get_int8 = _ndarray_get_int8Ptr.asFunction<
      int Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>,
          ffi.Pointer<ffi.Int8>)>();

  /// Returns a double-precision complex floating-point ndarray data element.
  int ndarray_get_complex128(
    ffi.Pointer<ndarray> arr,
    ffi.Pointer<ffi.Int64> sub,
    ffi.Pointer<ndarray_complex128_t> out,
  ) {
    return _ndarray_get_complex128(
      arr,
      sub,
      out,
    );
  }

  late final _ndarray_get_complex128Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ndarray_complex128_t>)>>('ndarray_get_complex128');
  late final _ndarray_get_complex128 = _ndarray_get_complex128Ptr.asFunction<
      int Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>,
          ffi.Pointer<ndarray_complex128_t>)>();

  /// Returns a single-precision complex floating-point ndarray data element.
  int ndarray_get_complex64(
    ffi.Pointer<ndarray> arr,
    ffi.Pointer<ffi.Int64> sub,
    ffi.Pointer<ndarray_complex64_t> out,
  ) {
    return _ndarray_get_complex64(
      arr,
      sub,
      out,
    );
  }

  late final _ndarray_get_complex64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ndarray_complex64_t>)>>('ndarray_get_complex64');
  late final _ndarray_get_complex64 = _ndarray_get_complex64Ptr.asFunction<
      int Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>,
          ffi.Pointer<ndarray_complex64_t>)>();

  /// Returns a boolean ndarray data element.
  int ndarray_get_bool(
    ffi.Pointer<ndarray> arr,
    ffi.Pointer<ffi.Int64> sub,
    ffi.Pointer<ffi.Bool> out,
  ) {
    return _ndarray_get_bool(
      arr,
      sub,
      out,
    );
  }

  late final _ndarray_get_boolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Bool>)>>('ndarray_get_bool');
  late final _ndarray_get_bool = _ndarray_get_boolPtr.asFunction<
      int Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>,
          ffi.Pointer<ffi.Bool>)>();

  /// Returns a pointer to an ndarray data element in the underlying byte array.
  ffi.Pointer<ffi.Uint8> ndarray_get_ptr(
    ffi.Pointer<ndarray> arr,
    ffi.Pointer<ffi.Int64> sub,
  ) {
    return _ndarray_get_ptr(
      arr,
      sub,
    );
  }

  late final _ndarray_get_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<ndarray>,
              ffi.Pointer<ffi.Int64>)>>('ndarray_get_ptr');
  late final _ndarray_get_ptr = _ndarray_get_ptrPtr.asFunction<
      ffi.Pointer<ffi.Uint8> Function(
          ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>)>();

  /// Returns an ndarray data element specified by a byte array pointer.
  int ndarray_get_ptr_value(
    ffi.Pointer<ndarray> arr,
    ffi.Pointer<ffi.Uint8> idx,
    ffi.Pointer<ffi.Void> out,
  ) {
    return _ndarray_get_ptr_value(
      arr,
      idx,
      out,
    );
  }

  late final _ndarray_get_ptr_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Void>)>>('ndarray_get_ptr_value');
  late final _ndarray_get_ptr_value = _ndarray_get_ptr_valuePtr.asFunction<
      int Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Void>)>();

  /// Returns a double-precision floating-point ndarray data element specified by a
  /// byte array pointer.
  int ndarray_get_ptr_float64(
    ffi.Pointer<ffi.Uint8> idx,
    ffi.Pointer<ffi.Double> out,
  ) {
    return _ndarray_get_ptr_float64(
      idx,
      out,
    );
  }

  late final _ndarray_get_ptr_float64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Double>)>>('ndarray_get_ptr_float64');
  late final _ndarray_get_ptr_float64 = _ndarray_get_ptr_float64Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Double>)>();

  /// Returns a single-precision floating-point ndarray data element specified by a
  /// byte array pointer.
  int ndarray_get_ptr_float32(
    ffi.Pointer<ffi.Uint8> idx,
    ffi.Pointer<ffi.Float> out,
  ) {
    return _ndarray_get_ptr_float32(
      idx,
      out,
    );
  }

  late final _ndarray_get_ptr_float32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Float>)>>('ndarray_get_ptr_float32');
  late final _ndarray_get_ptr_float32 = _ndarray_get_ptr_float32Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Float>)>();

  /// Returns an unsigned 64-bit integer ndarray data element specified by a byte
  /// array pointer.
  int ndarray_get_ptr_uint64(
    ffi.Pointer<ffi.Uint8> idx,
    ffi.Pointer<ffi.Uint64> out,
  ) {
    return _ndarray_get_ptr_uint64(
      idx,
      out,
    );
  }

  late final _ndarray_get_ptr_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint64>)>>('ndarray_get_ptr_uint64');
  late final _ndarray_get_ptr_uint64 = _ndarray_get_ptr_uint64Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint64>)>();

  /// Returns a signed 64-bit integer ndarray data element specified by a byte
  /// array pointer.
  int ndarray_get_ptr_int64(
    ffi.Pointer<ffi.Uint8> idx,
    ffi.Pointer<ffi.Int64> out,
  ) {
    return _ndarray_get_ptr_int64(
      idx,
      out,
    );
  }

  late final _ndarray_get_ptr_int64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Int64>)>>('ndarray_get_ptr_int64');
  late final _ndarray_get_ptr_int64 = _ndarray_get_ptr_int64Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Int64>)>();

  /// Returns an unsigned 32-bit integer ndarray data element specified by a byte
  /// array pointer.
  int ndarray_get_ptr_uint32(
    ffi.Pointer<ffi.Uint8> idx,
    ffi.Pointer<ffi.Uint32> out,
  ) {
    return _ndarray_get_ptr_uint32(
      idx,
      out,
    );
  }

  late final _ndarray_get_ptr_uint32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint32>)>>('ndarray_get_ptr_uint32');
  late final _ndarray_get_ptr_uint32 = _ndarray_get_ptr_uint32Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint32>)>();

  /// Returns a signed 32-bit integer ndarray data element specified by a byte
  /// array pointer.
  int ndarray_get_ptr_int32(
    ffi.Pointer<ffi.Uint8> idx,
    ffi.Pointer<ffi.Int32> out,
  ) {
    return _ndarray_get_ptr_int32(
      idx,
      out,
    );
  }

  late final _ndarray_get_ptr_int32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Int32>)>>('ndarray_get_ptr_int32');
  late final _ndarray_get_ptr_int32 = _ndarray_get_ptr_int32Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Int32>)>();

  /// Returns an unsigned 16-bit integer ndarray data element specified by a byte
  /// array pointer.
  int ndarray_get_ptr_uint16(
    ffi.Pointer<ffi.Uint8> idx,
    ffi.Pointer<ffi.Uint16> out,
  ) {
    return _ndarray_get_ptr_uint16(
      idx,
      out,
    );
  }

  late final _ndarray_get_ptr_uint16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint16>)>>('ndarray_get_ptr_uint16');
  late final _ndarray_get_ptr_uint16 = _ndarray_get_ptr_uint16Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint16>)>();

  /// Returns a signed 16-bit integer ndarray data element specified by a byte
  /// array pointer.
  int ndarray_get_ptr_int16(
    ffi.Pointer<ffi.Uint8> idx,
    ffi.Pointer<ffi.Int16> out,
  ) {
    return _ndarray_get_ptr_int16(
      idx,
      out,
    );
  }

  late final _ndarray_get_ptr_int16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Int16>)>>('ndarray_get_ptr_int16');
  late final _ndarray_get_ptr_int16 = _ndarray_get_ptr_int16Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Int16>)>();

  /// Returns an unsigned 8-bit integer ndarray data element specified by a byte
  /// array pointer.
  int ndarray_get_ptr_uint8(
    ffi.Pointer<ffi.Uint8> idx,
    ffi.Pointer<ffi.Uint8> out,
  ) {
    return _ndarray_get_ptr_uint8(
      idx,
      out,
    );
  }

  late final _ndarray_get_ptr_uint8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>)>>('ndarray_get_ptr_uint8');
  late final _ndarray_get_ptr_uint8 = _ndarray_get_ptr_uint8Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Uint8>)>();

  /// Returns a signed 8-bit integer ndarray data element specified by a byte array
  /// pointer.
  int ndarray_get_ptr_int8(
    ffi.Pointer<ffi.Uint8> idx,
    ffi.Pointer<ffi.Int8> out,
  ) {
    return _ndarray_get_ptr_int8(
      idx,
      out,
    );
  }

  late final _ndarray_get_ptr_int8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Int8>)>>('ndarray_get_ptr_int8');
  late final _ndarray_get_ptr_int8 = _ndarray_get_ptr_int8Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Int8>)>();

  /// Returns a double-precision complex floating-point ndarray data element
  /// specified by a byte array pointer.
  int ndarray_get_ptr_complex128(
    ffi.Pointer<ffi.Uint8> idx,
    ffi.Pointer<ndarray_complex128_t> out,
  ) {
    return _ndarray_get_ptr_complex128(
      idx,
      out,
    );
  }

  late final _ndarray_get_ptr_complex128Ptr = _lookup<
          ffi.NativeFunction<
              ffi.Int8 Function(
                  ffi.Pointer<ffi.Uint8>, ffi.Pointer<ndarray_complex128_t>)>>(
      'ndarray_get_ptr_complex128');
  late final _ndarray_get_ptr_complex128 =
      _ndarray_get_ptr_complex128Ptr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>, ffi.Pointer<ndarray_complex128_t>)>();

  /// Returns a single-precision complex floating-point ndarray data element
  /// specified by a byte array pointer.
  int ndarray_get_ptr_complex64(
    ffi.Pointer<ffi.Uint8> idx,
    ffi.Pointer<ndarray_complex64_t> out,
  ) {
    return _ndarray_get_ptr_complex64(
      idx,
      out,
    );
  }

  late final _ndarray_get_ptr_complex64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ndarray_complex64_t>)>>('ndarray_get_ptr_complex64');
  late final _ndarray_get_ptr_complex64 =
      _ndarray_get_ptr_complex64Ptr.asFunction<
          int Function(
              ffi.Pointer<ffi.Uint8>, ffi.Pointer<ndarray_complex64_t>)>();

  /// Returns a boolean ndarray data element specified by a byte array pointer.
  int ndarray_get_ptr_bool(
    ffi.Pointer<ffi.Uint8> idx,
    ffi.Pointer<ffi.Bool> out,
  ) {
    return _ndarray_get_ptr_bool(
      idx,
      out,
    );
  }

  late final _ndarray_get_ptr_boolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Bool>)>>('ndarray_get_ptr_bool');
  late final _ndarray_get_ptr_bool = _ndarray_get_ptr_boolPtr.asFunction<
      int Function(ffi.Pointer<ffi.Uint8>, ffi.Pointer<ffi.Bool>)>();

  /// Returns an ndarray data element located at a specified linear index.
  int ndarray_iget(
    ffi.Pointer<ndarray> arr,
    int idx,
    ffi.Pointer<ffi.Void> out,
  ) {
    return _ndarray_iget(
      arr,
      idx,
      out,
    );
  }

  late final _ndarray_igetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Int64,
              ffi.Pointer<ffi.Void>)>>('ndarray_iget');
  late final _ndarray_iget = _ndarray_igetPtr.asFunction<
      int Function(ffi.Pointer<ndarray>, int, ffi.Pointer<ffi.Void>)>();

  /// Returns a double-precision floating-point ndarray data element located at a
  /// specified linear index.
  int ndarray_iget_float64(
    ffi.Pointer<ndarray> arr,
    int idx,
    ffi.Pointer<ffi.Double> out,
  ) {
    return _ndarray_iget_float64(
      arr,
      idx,
      out,
    );
  }

  late final _ndarray_iget_float64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Int64,
              ffi.Pointer<ffi.Double>)>>('ndarray_iget_float64');
  late final _ndarray_iget_float64 = _ndarray_iget_float64Ptr.asFunction<
      int Function(ffi.Pointer<ndarray>, int, ffi.Pointer<ffi.Double>)>();

  /// Returns a single-precision floating-point ndarray data element located at a
  /// specified linear index.
  int ndarray_iget_float32(
    ffi.Pointer<ndarray> arr,
    int idx,
    ffi.Pointer<ffi.Float> out,
  ) {
    return _ndarray_iget_float32(
      arr,
      idx,
      out,
    );
  }

  late final _ndarray_iget_float32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Int64,
              ffi.Pointer<ffi.Float>)>>('ndarray_iget_float32');
  late final _ndarray_iget_float32 = _ndarray_iget_float32Ptr.asFunction<
      int Function(ffi.Pointer<ndarray>, int, ffi.Pointer<ffi.Float>)>();

  /// Returns an unsigned 64-bit integer ndarray data element located at a
  /// specified linear index.
  int ndarray_iget_uint64(
    ffi.Pointer<ndarray> arr,
    int idx,
    ffi.Pointer<ffi.Uint64> out,
  ) {
    return _ndarray_iget_uint64(
      arr,
      idx,
      out,
    );
  }

  late final _ndarray_iget_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Int64,
              ffi.Pointer<ffi.Uint64>)>>('ndarray_iget_uint64');
  late final _ndarray_iget_uint64 = _ndarray_iget_uint64Ptr.asFunction<
      int Function(ffi.Pointer<ndarray>, int, ffi.Pointer<ffi.Uint64>)>();

  /// Returns a signed 64-bit integer ndarray data element located at a specified
  /// linear index.
  int ndarray_iget_int64(
    ffi.Pointer<ndarray> arr,
    int idx,
    ffi.Pointer<ffi.Int64> out,
  ) {
    return _ndarray_iget_int64(
      arr,
      idx,
      out,
    );
  }

  late final _ndarray_iget_int64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Int64,
              ffi.Pointer<ffi.Int64>)>>('ndarray_iget_int64');
  late final _ndarray_iget_int64 = _ndarray_iget_int64Ptr.asFunction<
      int Function(ffi.Pointer<ndarray>, int, ffi.Pointer<ffi.Int64>)>();

  /// Returns an unsigned 32-bit integer ndarray data element located at a
  /// specified linear index.
  int ndarray_iget_uint32(
    ffi.Pointer<ndarray> arr,
    int idx,
    ffi.Pointer<ffi.Uint32> out,
  ) {
    return _ndarray_iget_uint32(
      arr,
      idx,
      out,
    );
  }

  late final _ndarray_iget_uint32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Int64,
              ffi.Pointer<ffi.Uint32>)>>('ndarray_iget_uint32');
  late final _ndarray_iget_uint32 = _ndarray_iget_uint32Ptr.asFunction<
      int Function(ffi.Pointer<ndarray>, int, ffi.Pointer<ffi.Uint32>)>();

  /// Returns a signed 32-bit integer ndarray data element located at a specified
  /// linear index.
  int ndarray_iget_int32(
    ffi.Pointer<ndarray> arr,
    int idx,
    ffi.Pointer<ffi.Int32> out,
  ) {
    return _ndarray_iget_int32(
      arr,
      idx,
      out,
    );
  }

  late final _ndarray_iget_int32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Int64,
              ffi.Pointer<ffi.Int32>)>>('ndarray_iget_int32');
  late final _ndarray_iget_int32 = _ndarray_iget_int32Ptr.asFunction<
      int Function(ffi.Pointer<ndarray>, int, ffi.Pointer<ffi.Int32>)>();

  /// Returns an unsigned 16-bit integer ndarray data element located at a
  /// specified linear index.
  int ndarray_iget_uint16(
    ffi.Pointer<ndarray> arr,
    int idx,
    ffi.Pointer<ffi.Uint16> out,
  ) {
    return _ndarray_iget_uint16(
      arr,
      idx,
      out,
    );
  }

  late final _ndarray_iget_uint16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Int64,
              ffi.Pointer<ffi.Uint16>)>>('ndarray_iget_uint16');
  late final _ndarray_iget_uint16 = _ndarray_iget_uint16Ptr.asFunction<
      int Function(ffi.Pointer<ndarray>, int, ffi.Pointer<ffi.Uint16>)>();

  /// Returns a signed 16-bit integer ndarray data element located at a specified
  /// linear index.
  int ndarray_iget_int16(
    ffi.Pointer<ndarray> arr,
    int idx,
    ffi.Pointer<ffi.Int16> out,
  ) {
    return _ndarray_iget_int16(
      arr,
      idx,
      out,
    );
  }

  late final _ndarray_iget_int16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Int64,
              ffi.Pointer<ffi.Int16>)>>('ndarray_iget_int16');
  late final _ndarray_iget_int16 = _ndarray_iget_int16Ptr.asFunction<
      int Function(ffi.Pointer<ndarray>, int, ffi.Pointer<ffi.Int16>)>();

  /// Returns an unsigned 8-bit integer ndarray data element located at a specified
  /// linear index.
  int ndarray_iget_uint8(
    ffi.Pointer<ndarray> arr,
    int idx,
    ffi.Pointer<ffi.Uint8> out,
  ) {
    return _ndarray_iget_uint8(
      arr,
      idx,
      out,
    );
  }

  late final _ndarray_iget_uint8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Int64,
              ffi.Pointer<ffi.Uint8>)>>('ndarray_iget_uint8');
  late final _ndarray_iget_uint8 = _ndarray_iget_uint8Ptr.asFunction<
      int Function(ffi.Pointer<ndarray>, int, ffi.Pointer<ffi.Uint8>)>();

  /// Returns a signed 8-bit integer ndarray data element located at a specified
  /// linear index.
  int ndarray_iget_int8(
    ffi.Pointer<ndarray> arr,
    int idx,
    ffi.Pointer<ffi.Int8> out,
  ) {
    return _ndarray_iget_int8(
      arr,
      idx,
      out,
    );
  }

  late final _ndarray_iget_int8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Int64,
              ffi.Pointer<ffi.Int8>)>>('ndarray_iget_int8');
  late final _ndarray_iget_int8 = _ndarray_iget_int8Ptr.asFunction<
      int Function(ffi.Pointer<ndarray>, int, ffi.Pointer<ffi.Int8>)>();

  /// Returns a double-precision complex floating-point ndarray data element
  /// located at a specified linear index.
  int ndarray_iget_complex128(
    ffi.Pointer<ndarray> arr,
    int idx,
    ffi.Pointer<ndarray_complex128_t> out,
  ) {
    return _ndarray_iget_complex128(
      arr,
      idx,
      out,
    );
  }

  late final _ndarray_iget_complex128Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Int64,
              ffi.Pointer<ndarray_complex128_t>)>>('ndarray_iget_complex128');
  late final _ndarray_iget_complex128 = _ndarray_iget_complex128Ptr.asFunction<
      int Function(
          ffi.Pointer<ndarray>, int, ffi.Pointer<ndarray_complex128_t>)>();

  /// Returns a single-precision complex floating-point ndarray data element
  /// located at a specified linear index.
  int ndarray_iget_complex64(
    ffi.Pointer<ndarray> arr,
    int idx,
    ffi.Pointer<ndarray_complex64_t> out,
  ) {
    return _ndarray_iget_complex64(
      arr,
      idx,
      out,
    );
  }

  late final _ndarray_iget_complex64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Int64,
              ffi.Pointer<ndarray_complex64_t>)>>('ndarray_iget_complex64');
  late final _ndarray_iget_complex64 = _ndarray_iget_complex64Ptr.asFunction<
      int Function(
          ffi.Pointer<ndarray>, int, ffi.Pointer<ndarray_complex64_t>)>();

  /// Returns a boolean ndarray data element located at a specified linear index.
  int ndarray_iget_bool(
    ffi.Pointer<ndarray> arr,
    int idx,
    ffi.Pointer<ffi.Bool> out,
  ) {
    return _ndarray_iget_bool(
      arr,
      idx,
      out,
    );
  }

  late final _ndarray_iget_boolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Int64,
              ffi.Pointer<ffi.Bool>)>>('ndarray_iget_bool');
  late final _ndarray_iget_bool = _ndarray_iget_boolPtr.asFunction<
      int Function(ffi.Pointer<ndarray>, int, ffi.Pointer<ffi.Bool>)>();

  /// Returns a pointer in the underlying byte array for an ndarray data element
  /// located at a specified linear index.
  ffi.Pointer<ffi.Uint8> ndarray_iget_ptr(
    ffi.Pointer<ndarray> arr,
    int idx,
  ) {
    return _ndarray_iget_ptr(
      arr,
      idx,
    );
  }

  late final _ndarray_iget_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint8> Function(
              ffi.Pointer<ndarray>, ffi.Int64)>>('ndarray_iget_ptr');
  late final _ndarray_iget_ptr = _ndarray_iget_ptrPtr
      .asFunction<ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<ndarray>, int)>();

  /// Sets an ndarray data element.
  int ndarray_set(
    ffi.Pointer<ndarray> arr,
    ffi.Pointer<ffi.Int64> sub,
    ffi.Pointer<ffi.Void> v,
  ) {
    return _ndarray_set(
      arr,
      sub,
      v,
    );
  }

  late final _ndarray_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>,
              ffi.Pointer<ffi.Void>)>>('ndarray_set');
  late final _ndarray_set = _ndarray_setPtr.asFunction<
      int Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>,
          ffi.Pointer<ffi.Void>)>();

  /// Sets a double-precision floating-point ndarray data element.
  int ndarray_set_float64(
    ffi.Pointer<ndarray> arr,
    ffi.Pointer<ffi.Int64> sub,
    double v,
  ) {
    return _ndarray_set_float64(
      arr,
      sub,
      v,
    );
  }

  late final _ndarray_set_float64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>,
              ffi.Double)>>('ndarray_set_float64');
  late final _ndarray_set_float64 = _ndarray_set_float64Ptr.asFunction<
      int Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>, double)>();

  /// Sets a single-precision floating-point ndarray data element.
  int ndarray_set_float32(
    ffi.Pointer<ndarray> arr,
    ffi.Pointer<ffi.Int64> sub,
    double v,
  ) {
    return _ndarray_set_float32(
      arr,
      sub,
      v,
    );
  }

  late final _ndarray_set_float32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>,
              ffi.Float)>>('ndarray_set_float32');
  late final _ndarray_set_float32 = _ndarray_set_float32Ptr.asFunction<
      int Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>, double)>();

  /// Sets an unsigned 64-bit integer ndarray data element.
  int ndarray_set_uint64(
    ffi.Pointer<ndarray> arr,
    ffi.Pointer<ffi.Int64> sub,
    int v,
  ) {
    return _ndarray_set_uint64(
      arr,
      sub,
      v,
    );
  }

  late final _ndarray_set_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>,
              ffi.Uint64)>>('ndarray_set_uint64');
  late final _ndarray_set_uint64 = _ndarray_set_uint64Ptr.asFunction<
      int Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>, int)>();

  /// Sets a signed 64-bit integer ndarray data element.
  int ndarray_set_int64(
    ffi.Pointer<ndarray> arr,
    ffi.Pointer<ffi.Int64> sub,
    int v,
  ) {
    return _ndarray_set_int64(
      arr,
      sub,
      v,
    );
  }

  late final _ndarray_set_int64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>,
              ffi.Int64)>>('ndarray_set_int64');
  late final _ndarray_set_int64 = _ndarray_set_int64Ptr.asFunction<
      int Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>, int)>();

  /// Sets an unsigned 32-bit integer ndarray data element.
  int ndarray_set_uint32(
    ffi.Pointer<ndarray> arr,
    ffi.Pointer<ffi.Int64> sub,
    int v,
  ) {
    return _ndarray_set_uint32(
      arr,
      sub,
      v,
    );
  }

  late final _ndarray_set_uint32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>,
              ffi.Uint32)>>('ndarray_set_uint32');
  late final _ndarray_set_uint32 = _ndarray_set_uint32Ptr.asFunction<
      int Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>, int)>();

  /// Sets a signed 32-bit integer ndarray data element.
  int ndarray_set_int32(
    ffi.Pointer<ndarray> arr,
    ffi.Pointer<ffi.Int64> sub,
    int v,
  ) {
    return _ndarray_set_int32(
      arr,
      sub,
      v,
    );
  }

  late final _ndarray_set_int32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>,
              ffi.Int32)>>('ndarray_set_int32');
  late final _ndarray_set_int32 = _ndarray_set_int32Ptr.asFunction<
      int Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>, int)>();

  /// Sets an unsigned 16-bit integer ndarray data element.
  int ndarray_set_uint16(
    ffi.Pointer<ndarray> arr,
    ffi.Pointer<ffi.Int64> sub,
    int v,
  ) {
    return _ndarray_set_uint16(
      arr,
      sub,
      v,
    );
  }

  late final _ndarray_set_uint16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>,
              ffi.Uint16)>>('ndarray_set_uint16');
  late final _ndarray_set_uint16 = _ndarray_set_uint16Ptr.asFunction<
      int Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>, int)>();

  /// Sets a signed 16-bit integer ndarray data element.
  int ndarray_set_int16(
    ffi.Pointer<ndarray> arr,
    ffi.Pointer<ffi.Int64> sub,
    int v,
  ) {
    return _ndarray_set_int16(
      arr,
      sub,
      v,
    );
  }

  late final _ndarray_set_int16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>,
              ffi.Int16)>>('ndarray_set_int16');
  late final _ndarray_set_int16 = _ndarray_set_int16Ptr.asFunction<
      int Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>, int)>();

  /// Sets an unsigned 8-bit integer ndarray data element.
  int ndarray_set_uint8(
    ffi.Pointer<ndarray> arr,
    ffi.Pointer<ffi.Int64> sub,
    int v,
  ) {
    return _ndarray_set_uint8(
      arr,
      sub,
      v,
    );
  }

  late final _ndarray_set_uint8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>,
              ffi.Uint8)>>('ndarray_set_uint8');
  late final _ndarray_set_uint8 = _ndarray_set_uint8Ptr.asFunction<
      int Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>, int)>();

  /// Sets a signed 8-bit integer ndarray data element.
  int ndarray_set_int8(
    ffi.Pointer<ndarray> arr,
    ffi.Pointer<ffi.Int64> sub,
    int v,
  ) {
    return _ndarray_set_int8(
      arr,
      sub,
      v,
    );
  }

  late final _ndarray_set_int8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>,
              ffi.Int8)>>('ndarray_set_int8');
  late final _ndarray_set_int8 = _ndarray_set_int8Ptr.asFunction<
      int Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>, int)>();

  /// Sets a double-precision complex floating-point ndarray data element.
  int ndarray_set_complex128(
    ffi.Pointer<ndarray> arr,
    ffi.Pointer<ffi.Int64> sub,
    ndarray_complex128_t v,
  ) {
    return _ndarray_set_complex128(
      arr,
      sub,
      v,
    );
  }

  late final _ndarray_set_complex128Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>,
              ndarray_complex128_t)>>('ndarray_set_complex128');
  late final _ndarray_set_complex128 = _ndarray_set_complex128Ptr.asFunction<
      int Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>,
          ndarray_complex128_t)>();

  /// Sets a single-precision complex floating-point ndarray data element.
  int ndarray_set_complex64(
    ffi.Pointer<ndarray> arr,
    ffi.Pointer<ffi.Int64> sub,
    ndarray_complex64_t v,
  ) {
    return _ndarray_set_complex64(
      arr,
      sub,
      v,
    );
  }

  late final _ndarray_set_complex64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>,
              ndarray_complex64_t)>>('ndarray_set_complex64');
  late final _ndarray_set_complex64 = _ndarray_set_complex64Ptr.asFunction<
      int Function(
          ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>, ndarray_complex64_t)>();

  /// Sets a boolean ndarray data element.
  int ndarray_set_bool(
    ffi.Pointer<ndarray> arr,
    ffi.Pointer<ffi.Int64> sub,
    bool v,
  ) {
    return _ndarray_set_bool(
      arr,
      sub,
      v,
    );
  }

  late final _ndarray_set_boolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>,
              ffi.Bool)>>('ndarray_set_bool');
  late final _ndarray_set_bool = _ndarray_set_boolPtr.asFunction<
      int Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Int64>, bool)>();

  /// Sets an ndarray data element specified by a byte array pointer.
  int ndarray_set_ptr_value(
    ffi.Pointer<ndarray> arr,
    ffi.Pointer<ffi.Uint8> idx,
    ffi.Pointer<ffi.Void> v,
  ) {
    return _ndarray_set_ptr_value(
      arr,
      idx,
      v,
    );
  }

  late final _ndarray_set_ptr_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Void>)>>('ndarray_set_ptr_value');
  late final _ndarray_set_ptr_value = _ndarray_set_ptr_valuePtr.asFunction<
      int Function(ffi.Pointer<ndarray>, ffi.Pointer<ffi.Uint8>,
          ffi.Pointer<ffi.Void>)>();

  /// Sets a double-precision floating-point ndarray data element specified by a
  /// byte array pointer.
  int ndarray_set_ptr_float64(
    ffi.Pointer<ffi.Uint8> idx,
    double v,
  ) {
    return _ndarray_set_ptr_float64(
      idx,
      v,
    );
  }

  late final _ndarray_set_ptr_float64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(
              ffi.Pointer<ffi.Uint8>, ffi.Double)>>('ndarray_set_ptr_float64');
  late final _ndarray_set_ptr_float64 = _ndarray_set_ptr_float64Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Uint8>, double)>();

  /// Sets a single-precision floating-point ndarray data element specified by a
  /// byte array pointer.
  int ndarray_set_ptr_float32(
    ffi.Pointer<ffi.Uint8> idx,
    double v,
  ) {
    return _ndarray_set_ptr_float32(
      idx,
      v,
    );
  }

  late final _ndarray_set_ptr_float32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(
              ffi.Pointer<ffi.Uint8>, ffi.Float)>>('ndarray_set_ptr_float32');
  late final _ndarray_set_ptr_float32 = _ndarray_set_ptr_float32Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Uint8>, double)>();

  /// Sets an unsigned 64-bit integer ndarray data element specified by a byte
  /// array pointer.
  int ndarray_set_ptr_uint64(
    ffi.Pointer<ffi.Uint8> idx,
    int v,
  ) {
    return _ndarray_set_ptr_uint64(
      idx,
      v,
    );
  }

  late final _ndarray_set_ptr_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(
              ffi.Pointer<ffi.Uint8>, ffi.Uint64)>>('ndarray_set_ptr_uint64');
  late final _ndarray_set_ptr_uint64 = _ndarray_set_ptr_uint64Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Uint8>, int)>();

  /// Sets a signed 64-bit integer ndarray data element specified by a byte array
  /// pointer.
  int ndarray_set_ptr_int64(
    ffi.Pointer<ffi.Uint8> idx,
    int v,
  ) {
    return _ndarray_set_ptr_int64(
      idx,
      v,
    );
  }

  late final _ndarray_set_ptr_int64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(
              ffi.Pointer<ffi.Uint8>, ffi.Int64)>>('ndarray_set_ptr_int64');
  late final _ndarray_set_ptr_int64 = _ndarray_set_ptr_int64Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Uint8>, int)>();

  /// Sets an unsigned 32-bit integer ndarray data element specified by a byte
  /// array pointer.
  int ndarray_set_ptr_uint32(
    ffi.Pointer<ffi.Uint8> idx,
    int v,
  ) {
    return _ndarray_set_ptr_uint32(
      idx,
      v,
    );
  }

  late final _ndarray_set_ptr_uint32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(
              ffi.Pointer<ffi.Uint8>, ffi.Uint32)>>('ndarray_set_ptr_uint32');
  late final _ndarray_set_ptr_uint32 = _ndarray_set_ptr_uint32Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Uint8>, int)>();

  /// Sets a signed 32-bit integer ndarray data element specified by a byte array
  /// pointer.
  int ndarray_set_ptr_int32(
    ffi.Pointer<ffi.Uint8> idx,
    int v,
  ) {
    return _ndarray_set_ptr_int32(
      idx,
      v,
    );
  }

  late final _ndarray_set_ptr_int32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(
              ffi.Pointer<ffi.Uint8>, ffi.Int32)>>('ndarray_set_ptr_int32');
  late final _ndarray_set_ptr_int32 = _ndarray_set_ptr_int32Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Uint8>, int)>();

  /// Sets an unsigned 16-bit integer ndarray data element specified by a byte
  /// array pointer.
  int ndarray_set_ptr_uint16(
    ffi.Pointer<ffi.Uint8> idx,
    int v,
  ) {
    return _ndarray_set_ptr_uint16(
      idx,
      v,
    );
  }

  late final _ndarray_set_ptr_uint16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(
              ffi.Pointer<ffi.Uint8>, ffi.Uint16)>>('ndarray_set_ptr_uint16');
  late final _ndarray_set_ptr_uint16 = _ndarray_set_ptr_uint16Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Uint8>, int)>();

  /// Sets a signed 16-bit integer ndarray data element specified by a byte array
  /// pointer.
  int ndarray_set_ptr_int16(
    ffi.Pointer<ffi.Uint8> idx,
    int v,
  ) {
    return _ndarray_set_ptr_int16(
      idx,
      v,
    );
  }

  late final _ndarray_set_ptr_int16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(
              ffi.Pointer<ffi.Uint8>, ffi.Int16)>>('ndarray_set_ptr_int16');
  late final _ndarray_set_ptr_int16 = _ndarray_set_ptr_int16Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Uint8>, int)>();

  /// Sets an unsigned 8-bit integer ndarray data element specified by a byte array
  /// pointer.
  int ndarray_set_ptr_uint8(
    ffi.Pointer<ffi.Uint8> idx,
    int v,
  ) {
    return _ndarray_set_ptr_uint8(
      idx,
      v,
    );
  }

  late final _ndarray_set_ptr_uint8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(
              ffi.Pointer<ffi.Uint8>, ffi.Uint8)>>('ndarray_set_ptr_uint8');
  late final _ndarray_set_ptr_uint8 = _ndarray_set_ptr_uint8Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Uint8>, int)>();

  /// Sets a signed 8-bit integer ndarray data element specified by a byte array
  /// pointer.
  int ndarray_set_ptr_int8(
    ffi.Pointer<ffi.Uint8> idx,
    int v,
  ) {
    return _ndarray_set_ptr_int8(
      idx,
      v,
    );
  }

  late final _ndarray_set_ptr_int8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(
              ffi.Pointer<ffi.Uint8>, ffi.Int8)>>('ndarray_set_ptr_int8');
  late final _ndarray_set_ptr_int8 = _ndarray_set_ptr_int8Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Uint8>, int)>();

  /// Sets a double-precision complex floating-point ndarray data element specified
  /// by a byte array pointer.
  int ndarray_set_ptr_complex128(
    ffi.Pointer<ffi.Uint8> idx,
    ndarray_complex128_t v,
  ) {
    return _ndarray_set_ptr_complex128(
      idx,
      v,
    );
  }

  late final _ndarray_set_ptr_complex128Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ffi.Uint8>,
              ndarray_complex128_t)>>('ndarray_set_ptr_complex128');
  late final _ndarray_set_ptr_complex128 = _ndarray_set_ptr_complex128Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Uint8>, ndarray_complex128_t)>();

  /// Sets a single-precision complex floating-point ndarray data element specified
  /// by a byte array pointer.
  int ndarray_set_ptr_complex64(
    ffi.Pointer<ffi.Uint8> idx,
    ndarray_complex64_t v,
  ) {
    return _ndarray_set_ptr_complex64(
      idx,
      v,
    );
  }

  late final _ndarray_set_ptr_complex64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ffi.Uint8>,
              ndarray_complex64_t)>>('ndarray_set_ptr_complex64');
  late final _ndarray_set_ptr_complex64 = _ndarray_set_ptr_complex64Ptr
      .asFunction<int Function(ffi.Pointer<ffi.Uint8>, ndarray_complex64_t)>();

  /// Sets a boolean ndarray data element specified by a byte array pointer.
  int ndarray_set_ptr_bool(
    ffi.Pointer<ffi.Uint8> idx,
    bool v,
  ) {
    return _ndarray_set_ptr_bool(
      idx,
      v,
    );
  }

  late final _ndarray_set_ptr_boolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(
              ffi.Pointer<ffi.Uint8>, ffi.Bool)>>('ndarray_set_ptr_bool');
  late final _ndarray_set_ptr_bool = _ndarray_set_ptr_boolPtr
      .asFunction<int Function(ffi.Pointer<ffi.Uint8>, bool)>();

  /// Sets an ndarray data element located at a specified linear index.
  int ndarray_iset(
    ffi.Pointer<ndarray> arr,
    int idx,
    ffi.Pointer<ffi.Void> v,
  ) {
    return _ndarray_iset(
      arr,
      idx,
      v,
    );
  }

  late final _ndarray_isetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Int64,
              ffi.Pointer<ffi.Void>)>>('ndarray_iset');
  late final _ndarray_iset = _ndarray_isetPtr.asFunction<
      int Function(ffi.Pointer<ndarray>, int, ffi.Pointer<ffi.Void>)>();

  /// Sets a double-precision floating-point ndarray data element located at a
  /// specified linear index.
  int ndarray_iset_float64(
    ffi.Pointer<ndarray> arr,
    int idx,
    double v,
  ) {
    return _ndarray_iset_float64(
      arr,
      idx,
      v,
    );
  }

  late final _ndarray_iset_float64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Int64,
              ffi.Double)>>('ndarray_iset_float64');
  late final _ndarray_iset_float64 = _ndarray_iset_float64Ptr
      .asFunction<int Function(ffi.Pointer<ndarray>, int, double)>();

  /// Sets a single-precision floating-point ndarray data element located at a
  /// specified linear index.
  int ndarray_iset_float32(
    ffi.Pointer<ndarray> arr,
    int idx,
    double v,
  ) {
    return _ndarray_iset_float32(
      arr,
      idx,
      v,
    );
  }

  late final _ndarray_iset_float32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Int64,
              ffi.Float)>>('ndarray_iset_float32');
  late final _ndarray_iset_float32 = _ndarray_iset_float32Ptr
      .asFunction<int Function(ffi.Pointer<ndarray>, int, double)>();

  /// Sets an unsigned 64-bit integer ndarray data element located at a specified
  /// linear index.
  int ndarray_iset_uint64(
    ffi.Pointer<ndarray> arr,
    int idx,
    int v,
  ) {
    return _ndarray_iset_uint64(
      arr,
      idx,
      v,
    );
  }

  late final _ndarray_iset_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Int64,
              ffi.Uint64)>>('ndarray_iset_uint64');
  late final _ndarray_iset_uint64 = _ndarray_iset_uint64Ptr
      .asFunction<int Function(ffi.Pointer<ndarray>, int, int)>();

  /// Sets a signed 64-bit integer ndarray data element located at a specified
  /// linear index.
  int ndarray_iset_int64(
    ffi.Pointer<ndarray> arr,
    int idx,
    int v,
  ) {
    return _ndarray_iset_int64(
      arr,
      idx,
      v,
    );
  }

  late final _ndarray_iset_int64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Int64,
              ffi.Int64)>>('ndarray_iset_int64');
  late final _ndarray_iset_int64 = _ndarray_iset_int64Ptr
      .asFunction<int Function(ffi.Pointer<ndarray>, int, int)>();

  /// Sets an unsigned 32-bit integer ndarray data element located at a specified
  /// linear index.
  int ndarray_iset_uint32(
    ffi.Pointer<ndarray> arr,
    int idx,
    int v,
  ) {
    return _ndarray_iset_uint32(
      arr,
      idx,
      v,
    );
  }

  late final _ndarray_iset_uint32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Int64,
              ffi.Uint32)>>('ndarray_iset_uint32');
  late final _ndarray_iset_uint32 = _ndarray_iset_uint32Ptr
      .asFunction<int Function(ffi.Pointer<ndarray>, int, int)>();

  /// Sets a signed 32-bit integer ndarray data element located at a specified
  /// linear index.
  int ndarray_iset_int32(
    ffi.Pointer<ndarray> arr,
    int idx,
    int v,
  ) {
    return _ndarray_iset_int32(
      arr,
      idx,
      v,
    );
  }

  late final _ndarray_iset_int32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Int64,
              ffi.Int32)>>('ndarray_iset_int32');
  late final _ndarray_iset_int32 = _ndarray_iset_int32Ptr
      .asFunction<int Function(ffi.Pointer<ndarray>, int, int)>();

  /// Sets an unsigned 16-bit integer ndarray data element located at a specified
  /// linear index.
  int ndarray_iset_uint16(
    ffi.Pointer<ndarray> arr,
    int idx,
    int v,
  ) {
    return _ndarray_iset_uint16(
      arr,
      idx,
      v,
    );
  }

  late final _ndarray_iset_uint16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Int64,
              ffi.Uint16)>>('ndarray_iset_uint16');
  late final _ndarray_iset_uint16 = _ndarray_iset_uint16Ptr
      .asFunction<int Function(ffi.Pointer<ndarray>, int, int)>();

  /// Sets a signed 16-bit integer ndarray data element located at a specified
  /// linear index.
  int ndarray_iset_int16(
    ffi.Pointer<ndarray> arr,
    int idx,
    int v,
  ) {
    return _ndarray_iset_int16(
      arr,
      idx,
      v,
    );
  }

  late final _ndarray_iset_int16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Int64,
              ffi.Int16)>>('ndarray_iset_int16');
  late final _ndarray_iset_int16 = _ndarray_iset_int16Ptr
      .asFunction<int Function(ffi.Pointer<ndarray>, int, int)>();

  /// Sets an unsigned 8-bit integer ndarray data element located at a specified
  /// linear index.
  int ndarray_iset_uint8(
    ffi.Pointer<ndarray> arr,
    int idx,
    int v,
  ) {
    return _ndarray_iset_uint8(
      arr,
      idx,
      v,
    );
  }

  late final _ndarray_iset_uint8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Int64,
              ffi.Uint8)>>('ndarray_iset_uint8');
  late final _ndarray_iset_uint8 = _ndarray_iset_uint8Ptr
      .asFunction<int Function(ffi.Pointer<ndarray>, int, int)>();

  /// Sets a signed 8-bit integer ndarray data element located at a specified
  /// linear index.
  int ndarray_iset_int8(
    ffi.Pointer<ndarray> arr,
    int idx,
    int v,
  ) {
    return _ndarray_iset_int8(
      arr,
      idx,
      v,
    );
  }

  late final _ndarray_iset_int8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(
              ffi.Pointer<ndarray>, ffi.Int64, ffi.Int8)>>('ndarray_iset_int8');
  late final _ndarray_iset_int8 = _ndarray_iset_int8Ptr
      .asFunction<int Function(ffi.Pointer<ndarray>, int, int)>();

  /// Sets a double-precision complex floating-point ndarray data element located
  /// at a specified linear index.
  int ndarray_iset_complex128(
    ffi.Pointer<ndarray> arr,
    int idx,
    ndarray_complex128_t v,
  ) {
    return _ndarray_iset_complex128(
      arr,
      idx,
      v,
    );
  }

  late final _ndarray_iset_complex128Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Int64,
              ndarray_complex128_t)>>('ndarray_iset_complex128');
  late final _ndarray_iset_complex128 = _ndarray_iset_complex128Ptr.asFunction<
      int Function(ffi.Pointer<ndarray>, int, ndarray_complex128_t)>();

  /// Sets a single-precision complex floating-point ndarray data element located
  /// at a specified linear index.
  int ndarray_iset_complex64(
    ffi.Pointer<ndarray> arr,
    int idx,
    ndarray_complex64_t v,
  ) {
    return _ndarray_iset_complex64(
      arr,
      idx,
      v,
    );
  }

  late final _ndarray_iset_complex64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(ffi.Pointer<ndarray>, ffi.Int64,
              ndarray_complex64_t)>>('ndarray_iset_complex64');
  late final _ndarray_iset_complex64 = _ndarray_iset_complex64Ptr.asFunction<
      int Function(ffi.Pointer<ndarray>, int, ndarray_complex64_t)>();

  /// Sets a boolean ndarray data element located at a specified linear index.
  int ndarray_iset_bool(
    ffi.Pointer<ndarray> arr,
    int idx,
    bool v,
  ) {
    return _ndarray_iset_bool(
      arr,
      idx,
      v,
    );
  }

  late final _ndarray_iset_boolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(
              ffi.Pointer<ndarray>, ffi.Int64, ffi.Bool)>>('ndarray_iset_bool');
  late final _ndarray_iset_bool = _ndarray_iset_boolPtr
      .asFunction<int Function(ffi.Pointer<ndarray>, int, bool)>();
}

/// Enumeration of underlying ndarray data types.
abstract class NDARRAY_DTYPE {
  /// Boolean data types:
  static const int NDARRAY_BOOL = 0;

  /// Integer data types:
  static const int NDARRAY_INT8 = 1;
  static const int NDARRAY_UINT8 = 2;
  static const int NDARRAY_UINT8C = 3;
  static const int NDARRAY_INT16 = 4;
  static const int NDARRAY_UINT16 = 5;
  static const int NDARRAY_INT32 = 6;
  static const int NDARRAY_UINT32 = 7;
  static const int NDARRAY_INT64 = 8;
  static const int NDARRAY_UINT64 = 9;
  static const int NDARRAY_INT128 = 10;
  static const int NDARRAY_UINT128 = 11;
  static const int NDARRAY_INT256 = 12;
  static const int NDARRAY_UINT256 = 13;

  /// Floating-point data types:
  static const int NDARRAY_FLOAT16 = 14;
  static const int NDARRAY_BFLOAT16 = 15;
  static const int NDARRAY_FLOAT32 = 16;
  static const int NDARRAY_FLOAT64 = 17;
  static const int NDARRAY_FLOAT128 = 18;

  /// Complex floating-point number data types:
  static const int NDARRAY_COMPLEX64 = 19;
  static const int NDARRAY_COMPLEX128 = 20;

  /// Define a data type for "binary" data:
  static const int NDARRAY_BINARY = 21;

  /// Define a data type for "generic" Dart values (objects):
  static const int NDARRAY_GENERIC = 22;

  /// "Compute" the number of data types (this works because of how `enum`
  /// works: the value is automatically set to the last enumerated type plus 1):
  static const int NDARRAY_NDTYPES = 23;

  /// Reserve a signaling value which is guaranteed not to be a valid type
  /// enumeration number:
  static const int NDARRAY_NOTYPE = 24;

  /// Indicate the start of user defined type numbers (leaving room for type
  /// growth above):
  static const int NDARRAY_USERDEFINED_TYPE = 256;
}

/// Enumeration of ndarray orders (i.e., memory layout/iteration order).
abstract class NDARRAY_ORDER {
  /// Row-major (C-style):
  static const int NDARRAY_ROW_MAJOR = 1;

  /// Column-major (Fortran-style):
  static const int NDARRAY_COLUMN_MAJOR = 2;
}

/// Enumeration of ndarray casting modes.
abstract class NDARRAY_CASTING_MODE {
  /// Only allow casting between identical types:
  static const int NDARRAY_NO_CASTING = 0;

  /// Allow casting between identical and byte swapped types:
  static const int NDARRAY_EQUIV_CASTING = 1;

  /// Only allow "safe" casts:
  static const int NDARRAY_SAFE_CASTING = 2;

  /// Allow "safe" casts and casts within the same kind (e.g., between signed
  /// integers or between floats):
  static const int NDARRAY_SAME_KIND_CASTING = 3;

  /// Allow casting between all types (including between integers and floats):
  static const int NDARRAY_UNSAFE_CASTING = 4;
}

/// An opaque type definition for a single-precision complex floating-point
/// number.
///
/// @example
/// ndarray_complex64_t z;
///
/// // Set the real component:
/// z.re = 5.0f;
///
/// // Set the imaginary component:
/// z.im = 2.0f;
class ndarray_complex64_t extends ffi.Struct {
  /// Real component.
  @ffi.Float()
  external double re;

  /// Imaginary component.
  @ffi.Float()
  external double im;
}

/// An opaque type definition for a union for accessing the real and imaginary
/// parts of a single-precision complex floating-point number.
///
/// @example
/// float realf(const ndarray_complex64_t z) {
/// ndarray_complex64_parts_t v;
///
/// // Assign a single-precision complex floating-point number:
/// v.value = z;
///
/// // Extract the real component:
/// float re = v.parts[0];
///
/// return re;
/// }
///
/// // ...
///
/// // Create a complex number:
/// ndarray_complex64_t z = ndarray_complex64(5.0f, 2.0f);
///
/// // ...
///
/// // Access the real component:
/// float re = realf(z);
/// // returns 5.0f
class ndarray_complex64_parts_t extends ffi.Union {
  /// An opaque type for the output value (e.g., could be a `struct` or
  /// a C99 complex number):
  external ndarray_complex64_t value;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Float> parts;
}

/// An opaque type definition for a double-precision complex floating-point
/// number.
///
/// @example
/// ndarray_complex128_t z;
///
/// // Set the real component:
/// z.re = 5.0;
///
/// // Set the imaginary component:
/// z.im = 2.0;
class ndarray_complex128_t extends ffi.Struct {
  /// Real component.
  @ffi.Double()
  external double re;

  /// Imaginary component.
  @ffi.Double()
  external double im;
}

/// An opaque type definition for a union for accessing the real and imaginary
/// parts of a double-precision complex floating-point number.
///
/// @example
/// double real(const ndarray_complex128_t z) {
/// ndarray_complex128_parts_t v;
///
/// // Assign a double-precision complex floating-point number:
/// v.value = z;
///
/// // Extract the real component:
/// double re = v.parts[0];
///
/// return re;
/// }
///
/// // ...
///
/// // Create a complex number:
/// ndarray_complex128_t z = ndarray_complex128(5.0, 2.0);
///
/// // ...
///
/// // Access the real component:
/// double re = real(z);
/// // returns 5.0
class ndarray_complex128_parts_t extends ffi.Union {
  /// An opaque type for the output value (e.g., could be a `struct` or a C99
  /// complex number):
  external ndarray_complex128_t value;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Double> parts;
}

/// Enumeration of ndarray index modes.
abstract class NDARRAY_INDEX_MODE {
  static const int NDARRAY_INDEX_ERROR = 1;
  static const int NDARRAY_INDEX_CLAMP = 2;
  static const int NDARRAY_INDEX_WRAP = 3;
}

/// Structure for grouping unary function dispatch information.
///
/// @example
/// #include "ndarray/base/unary/b_b.h"
/// #include <stdlib.h>
/// #include <stdio.h>
///
/// ndarrayUnaryFcn functions[] = {
/// ndarray_b_b_0d,
/// ndarray_b_b_1d,
/// ndarray_b_b_2d,
/// ndarray_b_b_3d,
/// ndarray_b_b_4d,
/// ndarray_b_b_5d,
/// ndarray_b_b_6d,
/// ndarray_b_b_7d,
/// ndarray_b_b_8d,
/// ndarray_b_b_9d,
/// ndarray_b_b_10d,
/// ndarray_b_b_nd,
/// };
///
/// ndarrayUnaryFcn blocked_functions[] = {
/// ndarray_b_b_2d_blocked,
/// ndarray_b_b_3d_blocked,
/// ndarray_b_b_4d_blocked,
/// ndarray_b_b_5d_blocked,
/// ndarray_b_b_6d_blocked,
/// ndarray_b_b_7d_blocked,
/// ndarray_b_b_8d_blocked,
/// ndarray_b_b_9d_blocked,
/// ndarray_b_b_10d_blocked,
/// };
///
/// ndarrayUnaryDispatchObject obj = {
/// functions,
/// 12,
/// blocked_functions,
/// 9,
/// };
///
/// // ...
class ndarrayUnaryDispatchObject extends ffi.Struct {
  /// Array containing unary ndarray functions for performing element-wise
  /// computation:
  external ffi.Pointer<ndarrayUnaryFcn> functions;

  /// Number of unary ndarray functions:
  @ffi.Int32()
  external int nfunctions;

  /// Array containing unary ndarray functions for performing element-wise
  /// computation using loop blocking:
  external ffi.Pointer<ndarrayUnaryFcn> blocked_functions;

  /// Number of blocked unary ndarray functions:
  @ffi.Int32()
  external int nblockedfunctions;
}

/// Function pointer type for a unary ndarray function.
///
/// ## Note
///
/// -   This must match the definition of an `ndarrayFcn` found in
/// ndarray/base/function-object`.
///
/// @param arrays   array containing pointers to input and output ndarrays
/// @param data     function "data" (e.g., a callback)
/// @return         status code
typedef ndarrayUnaryFcn = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int8 Function(
            ffi.Pointer<ffi.Pointer<ndarray>>, ffi.Pointer<ffi.Void>)>>;

/// ndarray structure.
///
/// @example
/// #include "ndarray.h"
/// #include "ndarray/dtypes.h"
/// #include "ndarray/index_modes.h"
/// #include "ndarray/orders.h"
/// #include "ndarray/base/bytes_per_element.h"
/// #include <stdlib.h>
/// #include <stdio.h>
/// #include <stdint.h>
///
/// struct ndarray *x = malloc(sizeof(struct ndarray));
/// if (x == NULL) {
/// fprintf(stderr, "Error allocating memory.\n");
/// exit(1);
/// }
///
/// // Create an underlying byte array:
/// uint8_t buffer[] = {
/// 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
/// };
/// x->data = buffer;
///
/// // Specify the underlying data type:
/// x->dtype = NDARRAY_FLOAT64;
///
/// // Explicitly specify the number of bytes per element:
/// x->BYTES_PER_ELEMENT = NDARRAY_FLOAT64_BYTES_PER_ELEMENT;
///
/// // Specify the array shape:
/// int64_t shape[] = {3}; // vector consisting of 3 doubles
/// x->shape = shape;
///
/// // Specify the array strides:
/// int64_t strides[] = {x->BYTES_PER_ELEMENT};
/// x->strides = strides;
///
/// // Specify the byte offset:
/// x->offset = 0;
///
/// // Specify the array order (note: this does not matter for a 1-dimensional
/// // array):
/// x->order = NDARRAY_ROW_MAJOR;
///
/// // Specify the index mode:
/// x->imode = NDARRAY_INDEX_ERROR;
///
/// // Specify subscript index modes:
/// x->submodes = {NDARRAY_INDEX_ERROR};
/// x->nsubmodes = 1;
///
/// // Explicitly specify the number of array dimensions:
/// x->ndims = 1; // vector
///
/// // Explicitly specify the number of array elements (doubles):
/// x->length = x->shape[0];
///
/// // Explicitly specify the number of bytes:
/// x->byteLength = (x->length) * (x->BYTES_PER_ELEMENT);
///
/// // Explicitly set the array flags:
/// x->flags = ndarray_flags(x);
///
/// // Free allocated memory:
/// ndarray_free(x);
class ndarray extends ffi.Struct {
  /// Underlying data type:
  @ffi.Int16()
  external int dtype;

  /// Pointer to the underlying byte array:
  external ffi.Pointer<ffi.Uint8> data;

  /// Number of array dimensions:
  @ffi.Int64()
  external int ndims;

  /// Array shape (dimensions):
  external ffi.Pointer<ffi.Int64> shape;

  /// Array strides (in bytes) specifying how to iterate over a strided array:
  external ffi.Pointer<ffi.Int64> strides;

  /// Byte offset which specifies the location at which to start iterating
  /// over array elements:
  @ffi.Int64()
  external int offset;

  /// Array order (either row-major (C-style) or column-major (Fortran-style)):
  @ffi.Int8()
  external int order;

  /// Mode specifying how to handle indices which exceed array dimensions:
  @ffi.Int8()
  external int imode;

  /// Number of subscript modes:
  @ffi.Int64()
  external int nsubmodes;

  /// Mode(s) specifying how to handle subscripts which exceed array dimensions
  /// on a per dimension basis :
  external ffi.Pointer<ffi.Int8> submodes;

  /// Number of array elements:
  @ffi.Int64()
  external int length;

  /// Size in bytes:
  @ffi.Int64()
  external int byteLength;

  /// Number of bytes per element (i.e., item size):
  @ffi.Int64()
  external int BYTES_PER_ELEMENT;

  /// Bit mask providing information regarding the memory layout of the array
  /// (e.g., see macros):
  @ffi.Int64()
  external int flags;
}

/// Enumeration of number of bytes necessary to store an ndarray data type.
abstract class NDARRAY_BYTES_PER_ELEMENT {
  static const int NDARRAY_BOOL_BYTES_PER_ELEMENT = 1;
  static const int NDARRAY_INT8_BYTES_PER_ELEMENT = 1;
  static const int NDARRAY_UINT8_BYTES_PER_ELEMENT = 1;
  static const int NDARRAY_UINT8C_BYTES_PER_ELEMENT = 1;
  static const int NDARRAY_INT16_BYTES_PER_ELEMENT = 2;
  static const int NDARRAY_UINT16_BYTES_PER_ELEMENT = 2;
  static const int NDARRAY_INT32_BYTES_PER_ELEMENT = 4;
  static const int NDARRAY_UINT32_BYTES_PER_ELEMENT = 4;
  static const int NDARRAY_INT64_BYTES_PER_ELEMENT = 8;
  static const int NDARRAY_UINT64_BYTES_PER_ELEMENT = 8;
  static const int NDARRAY_INT128_BYTES_PER_ELEMENT = 16;
  static const int NDARRAY_UINT128_BYTES_PER_ELEMENT = 16;
  static const int NDARRAY_INT256_BYTES_PER_ELEMENT = 32;
  static const int NDARRAY_UINT256_BYTES_PER_ELEMENT = 32;
  static const int NDARRAY_FLOAT16_BYTES_PER_ELEMENT = 2;
  static const int NDARRAY_BFLOAT16_BYTES_PER_ELEMENT = 2;
  static const int NDARRAY_FLOAT32_BYTES_PER_ELEMENT = 4;
  static const int NDARRAY_FLOAT64_BYTES_PER_ELEMENT = 8;
  static const int NDARRAY_FLOAT128_BYTES_PER_ELEMENT = 16;
  static const int NDARRAY_COMPLEX64_BYTES_PER_ELEMENT = 8;
  static const int NDARRAY_COMPLEX128_BYTES_PER_ELEMENT = 16;
  static const int NDARRAY_BINARY_BYTES_PER_ELEMENT = 1;
}

/// Enumeration of the single letter character abbreviation for strided array
/// data types.
abstract class NDARRAY_DTYPE_CHAR {
  static const int NDARRAY_BOOL_CHAR = 120;

  /// *s*byte (signed byte)
  static const int NDARRAY_INT8_CHAR = 115;

  /// *b*yte
  static const int NDARRAY_UINT8_CHAR = 98;
  static const int NDARRAY_UINT8C_CHAR = 97;
  static const int NDARRAY_INT16_CHAR = 107;
  static const int NDARRAY_UINT16_CHAR = 116;

  /// signed 32-bit *i*nteger
  static const int NDARRAY_INT32_CHAR = 105;

  /// *u*nsigned 32-bit integer
  static const int NDARRAY_UINT32_CHAR = 117;

  /// signed *l*ong long (64-bit) integer
  static const int NDARRAY_INT64_CHAR = 108;
  static const int NDARRAY_UINT64_CHAR = 118;
  static const int NDARRAY_INT128_CHAR = 109;
  static const int NDARRAY_UINT128_CHAR = 119;
  static const int NDARRAY_INT256_CHAR = 110;
  static const int NDARRAY_UINT256_CHAR = 121;

  /// *h*alf-precision floating-point
  static const int NDARRAY_FLOAT16_CHAR = 104;
  static const int NDARRAY_BFLOAT16_CHAR = 101;

  /// *f*loat
  static const int NDARRAY_FLOAT32_CHAR = 102;

  /// *d*ouble
  static const int NDARRAY_FLOAT64_CHAR = 100;
  static const int NDARRAY_FLOAT128_CHAR = 103;

  /// *c*omplex (BLAS convention)
  static const int NDARRAY_COMPLEX64_CHAR = 99;

  /// *z* (BLAS convention)
  static const int NDARRAY_COMPLEX128_CHAR = 122;

  /// "*r*aw" data
  static const int NDARRAY_BINARY_CHAR = 114;

  /// "generic" JavaScript objects
  static const int NDARRAY_GENERIC_CHAR = 111;
}

/// Structure for grouping ndarray function information.
///
/// @example
/// #include "ndarray/base/function_object.h"
/// #include "ndarray/base/binary.h"
/// #include "ndarray/dtypes.h"
/// #include <stdlib.h>
/// #include <stdio.h>
///
/// // Define the function(s) we want to apply to ndarrays:
/// double scale(double x) {
/// return x * 10.0;
/// }
///
/// struct ndarrayFunctionObject *obj =
/// malloc(sizeof(struct ndarrayFunctionObject));
/// if (obj == NULL) {
/// fprintf(stderr, "Error allocating memory.\n");
/// exit(1);
/// }
///
/// // As the function to be applied is a unary function, define a unary ndarray
/// // interface:
/// const char name[] = "unary_ndarray_function";
/// obj->name = name;
///
/// obj->nin = 1;
/// obj->nout = 1;
/// obj->narrays = 2; // (obj->nin) + (obj->nout)
///
/// // Define a list of ndarray functions (in this case, as the function to be
/// // applied accepts doubles, we only use ndarray functions which handle
/// // doubles as function arguments and, for the purposes of this example, we
/// // assume that the output ndarray is (almost) always a double-precision
/// // floating-point  number array): obj->nfunctions = 8;
///
/// ndarrayFcn functions[] = {
/// ndarray_d_d,
/// ndarray_f_f_as_d_d,
/// ndarray_I_d_as_d_d,
/// ndarray_i_d_as_d_d,
/// ndarray_H_d_as_d_d,
/// ndarray_h_d_as_d_d,
/// ndarray_B_d_as_d_d,
/// ndarray_b_d_as_d_d
/// };
/// obj->functions = functions;
///
/// // Define the **ndarray** argument types for each ndarray function:
/// int32_t types[] = {
/// NDARRAY_FLOAT64, NDARRAY_FLOAT64,
/// NDARRAY_FLOAT32, NDARRAY_FLOAT32,
/// NDARRAY_UINT32, NDARRAY_FLOAT64,
/// NDARRAY_INT32, NDARRAY_FLOAT64,
/// NDARRAY_UINT16, NDARRAY_FLOAT64,
/// NDARRAY_INT16, NDARRAY_FLOAT64,
/// NDARRAY_UINT8, NDARRAY_FLOAT64,
/// NDARRAY_INT8, NDARRAY_FLOAT64
/// };
/// obj->types = types;
///
/// // Define a list of ndarray function "data" (in this case, callbacks):
/// void *data[] = {
/// (void *)scale,
/// (void *)scale,
/// (void *)scale,
/// (void *)scale,
/// (void *)scale,
/// (void *)scale,
/// (void *)scale,
/// (void *)scale
/// };
/// obj->data = data;
///
/// // Free allocated memory:
/// free(obj);
class ndarrayFunctionObject extends ffi.Struct {
  /// ndarray function name:
  external ffi.Pointer<ffi.Char> name;

  /// Number of input ndarrays:
  @ffi.Int32()
  external int nin;

  /// Number of output ndarrays:
  @ffi.Int32()
  external int nout;

  /// Total number of ndarray arguments (nin + nout):
  @ffi.Int32()
  external int narrays;

  /// Array containing ndarray functions:
  external ffi.Pointer<ndarrayFcn> functions;

  /// Number of ndarray functions:
  @ffi.Int32()
  external int nfunctions;

  /// Array of type "numbers" (as enumerated elsewhere), where the total number
  /// of types equals `narrays * nfunctions` and where each set of `narrays`
  /// consecutive types (non-overlapping) corresponds to the set of ndarray
  /// argument types for a corresponding ndarray function:
  external ffi.Pointer<ffi.Int32> types;

  /// Array of void pointers corresponding to the "data" (e.g., callbacks) which
  /// should be passed to a respective ndarray function (note: the number of
  /// pointers should match the number of ndarray functions):
  external ffi.Pointer<ffi.Pointer<ffi.Void>> data;
}

/// Function pointer type for an ndarray function.
///
/// @param arrays   array containing pointers to input and output ndarrays
/// @param data     function "data" (e.g., a callback)
/// @return         status code
typedef ndarrayFcn = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int8 Function(
            ffi.Pointer<ffi.Pointer<ndarray>>, ffi.Pointer<ffi.Void>)>>;

const int NDARRAY_ROW_MAJOR_CONTIGUOUS_FLAG = 1;

const int NDARRAY_COLUMN_MAJOR_CONTIGUOUS_FLAG = 2;
